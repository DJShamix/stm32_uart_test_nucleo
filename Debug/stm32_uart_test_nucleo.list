
stm32_uart_test_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08004848  08004848  00014848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e8  080049e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049f0  080049f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080049f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000070  08004a68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08004a68  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da66  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fbd  00000000  00000000  0002db06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0002fac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  000304b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000268df  00000000  00000000  00030de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b751  00000000  00000000  000576c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9dfc  00000000  00000000  00062e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014cc14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b94  00000000  00000000  0014cc68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004830 	.word	0x08004830

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004830 	.word	0x08004830

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b09f      	sub	sp, #124	; 0x7c
 800056c:	af1e      	add	r7, sp, #120	; 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fc7d 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f823 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8a3 	bl	80006c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057a:	f000 f871 	bl	8000660 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_UART_Receive_IT(&huart2, rx_buffer, 31);
  uart_helper_init(huart2);
 800057e:	4c0c      	ldr	r4, [pc, #48]	; (80005b0 <main+0x48>)
 8000580:	4668      	mov	r0, sp
 8000582:	f104 0310 	add.w	r3, r4, #16
 8000586:	2274      	movs	r2, #116	; 0x74
 8000588:	4619      	mov	r1, r3
 800058a:	f003 fc84 	bl	8003e96 <memcpy>
 800058e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000592:	f000 fa27 	bl	80009e4 <uart_helper_init>
  HAL_UART_Transmit(&huart2, (uint8_t*) "Hello\n", 6, 150);
 8000596:	2396      	movs	r3, #150	; 0x96
 8000598:	2206      	movs	r2, #6
 800059a:	4906      	ldr	r1, [pc, #24]	; (80005b4 <main+0x4c>)
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <main+0x48>)
 800059e:	f002 fb8d 	bl	8002cbc <HAL_UART_Transmit>

  send_message("There\n");
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <main+0x50>)
 80005a4:	f000 fa34 	bl	8000a10 <send_message>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uart_do_work();
 80005a8:	f000 fc2a 	bl	8000e00 <uart_do_work>
 80005ac:	e7fc      	b.n	80005a8 <main+0x40>
 80005ae:	bf00      	nop
 80005b0:	20000114 	.word	0x20000114
 80005b4:	08004848 	.word	0x08004848
 80005b8:	08004850 	.word	0x08004850

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b096      	sub	sp, #88	; 0x58
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2244      	movs	r2, #68	; 0x44
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fc71 	bl	8003eb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	463b      	mov	r3, r7
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005e2:	f001 f81f 	bl	8001624 <HAL_PWREx_ControlVoltageScaling>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005ec:	f000 f8d0 	bl	8000790 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fa:	2310      	movs	r3, #16
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000602:	2302      	movs	r3, #2
 8000604:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000606:	2301      	movs	r3, #1
 8000608:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800060a:	230a      	movs	r3, #10
 800060c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800060e:	2307      	movs	r3, #7
 8000610:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4618      	mov	r0, r3
 8000620:	f001 f856 	bl	80016d0 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800062a:	f000 f8b1 	bl	8000790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2303      	movs	r3, #3
 8000634:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	2104      	movs	r1, #4
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fc28 	bl	8001e9c <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000652:	f000 f89d 	bl	8000790 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3758      	adds	r7, #88	; 0x58
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000666:	4a15      	ldr	r2, [pc, #84]	; (80006bc <MX_USART2_UART_Init+0x5c>)
 8000668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 800066c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 80006a4:	f002 fabc 	bl	8002c20 <HAL_UART_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ae:	f000 f86f 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000114 	.word	0x20000114
 80006bc:	40004400 	.word	0x40004400

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a2a      	ldr	r2, [pc, #168]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_GPIO_Init+0xc4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a1e      	ldr	r2, [pc, #120]	; (8000784 <MX_GPIO_Init+0xc4>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_GPIO_Init+0xc4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_GPIO_Init+0xc4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a18      	ldr	r2, [pc, #96]	; (8000784 <MX_GPIO_Init+0xc4>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_GPIO_Init+0xc4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2120      	movs	r1, #32
 800073a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073e:	f000 ff4b 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_GPIO_Init+0xc8>)
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	480d      	ldr	r0, [pc, #52]	; (800078c <MX_GPIO_Init+0xcc>)
 8000758:	f000 fd94 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800075c:	2320      	movs	r3, #32
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000776:	f000 fd85 	bl	8001284 <HAL_GPIO_Init>

}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	; 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000
 8000788:	10210000 	.word	0x10210000
 800078c:	48000800 	.word	0x48000800

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <HAL_MspInit+0x44>)
 80007a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007a6:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <HAL_MspInit+0x44>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6613      	str	r3, [r2, #96]	; 0x60
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <HAL_MspInit+0x44>)
 80007b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <HAL_MspInit+0x44>)
 80007bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <HAL_MspInit+0x44>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c4:	6593      	str	r3, [r2, #88]	; 0x58
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_MspInit+0x44>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000

080007e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b0ac      	sub	sp, #176	; 0xb0
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2288      	movs	r2, #136	; 0x88
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f003 fb54 	bl	8003eb2 <memset>
  if(huart->Instance==USART2)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a25      	ldr	r2, [pc, #148]	; (80008a4 <HAL_UART_MspInit+0xc0>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d143      	bne.n	800089c <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000814:	2302      	movs	r3, #2
 8000816:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000818:	2300      	movs	r3, #0
 800081a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4618      	mov	r0, r3
 8000822:	f001 fd41 	bl	80022a8 <HAL_RCCEx_PeriphCLKConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800082c:	f7ff ffb0 	bl	8000790 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <HAL_UART_MspInit+0xc4>)
 8000832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000834:	4a1c      	ldr	r2, [pc, #112]	; (80008a8 <HAL_UART_MspInit+0xc4>)
 8000836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083a:	6593      	str	r3, [r2, #88]	; 0x58
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <HAL_UART_MspInit+0xc4>)
 800083e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <HAL_UART_MspInit+0xc4>)
 800084a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084c:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <HAL_UART_MspInit+0xc4>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <HAL_UART_MspInit+0xc4>)
 8000856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000860:	230c      	movs	r3, #12
 8000862:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000878:	2307      	movs	r3, #7
 800087a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000882:	4619      	mov	r1, r3
 8000884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000888:	f000 fcfc 	bl	8001284 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	2026      	movs	r0, #38	; 0x26
 8000892:	f000 fc42 	bl	800111a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000896:	2026      	movs	r0, #38	; 0x26
 8000898:	f000 fc5b 	bl	8001152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800089c:	bf00      	nop
 800089e:	37b0      	adds	r7, #176	; 0xb0
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40021000 	.word	0x40021000

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <NMI_Handler+0x4>

080008b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <HardFault_Handler+0x4>

080008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <MemManage_Handler+0x4>

080008be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <BusFault_Handler+0x4>

080008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <UsageFault_Handler+0x4>

080008ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f8:	f000 fb14 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}

08000900 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	//HAL_UART_RxCpltCallback(&huart2);

  /* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <USART2_IRQHandler+0x10>)
 8000906:	f002 fab1 	bl	8002e6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000114 	.word	0x20000114

08000914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800091c:	4a14      	ldr	r2, [pc, #80]	; (8000970 <_sbrk+0x5c>)
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <_sbrk+0x60>)
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <_sbrk+0x64>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <_sbrk+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	429a      	cmp	r2, r3
 8000942:	d207      	bcs.n	8000954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000944:	f003 fa6e 	bl	8003e24 <__errno>
 8000948:	4603      	mov	r3, r0
 800094a:	220c      	movs	r2, #12
 800094c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
 8000952:	e009      	b.n	8000968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095a:	4b07      	ldr	r3, [pc, #28]	; (8000978 <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <_sbrk+0x64>)
 8000964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20018000 	.word	0x20018000
 8000974:	00000400 	.word	0x00000400
 8000978:	2000008c 	.word	0x2000008c
 800097c:	200001b0 	.word	0x200001b0

08000980 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <SystemInit+0x5c>)
 8000986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098a:	4a14      	ldr	r2, [pc, #80]	; (80009dc <SystemInit+0x5c>)
 800098c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <SystemInit+0x60>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a11      	ldr	r2, [pc, #68]	; (80009e0 <SystemInit+0x60>)
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <SystemInit+0x60>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <SystemInit+0x60>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <SystemInit+0x60>)
 80009ac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009b0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <SystemInit+0x60>)
 80009b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009bc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <SystemInit+0x60>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <SystemInit+0x60>)
 80009c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <SystemInit+0x60>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00
 80009e0:	40021000 	.word	0x40021000

080009e4 <uart_helper_init>:
uint8_t is_new_message = 0;


//-----инициализация работы модуля UART---------------------------------------------------
//--------------------------------------------------------------------------------------------
void uart_helper_init(UART_HandleTypeDef uart_handle){
 80009e4:	b084      	sub	sp, #16
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	f107 0c08 	add.w	ip, r7, #8
 80009ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	//huart_handler =	uart_handle;
	HAL_UART_Receive_IT(&huart2, rx_buffer, 31);
 80009f2:	221f      	movs	r2, #31
 80009f4:	4904      	ldr	r1, [pc, #16]	; (8000a08 <uart_helper_init+0x24>)
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <uart_helper_init+0x28>)
 80009f8:	f002 f9f4 	bl	8002de4 <HAL_UART_Receive_IT>
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a04:	b004      	add	sp, #16
 8000a06:	4770      	bx	lr
 8000a08:	20000090 	.word	0x20000090
 8000a0c:	20000114 	.word	0x20000114

08000a10 <send_message>:


//-----функция отправки ответных сообщений---------------------------------------------------
//--------------------------------------------------------------------------------------------
void send_message(uint8_t *message){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b09c      	sub	sp, #112	; 0x70
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

	uint8_t tx_buffer[100] = {0};
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	2260      	movs	r2, #96	; 0x60
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 fa44 	bl	8003eb2 <memset>

	sprintf((char*) tx_buffer, "Message: %s", message);
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	4907      	ldr	r1, [pc, #28]	; (8000a50 <send_message+0x40>)
 8000a32:	4618      	mov	r0, r3
 8000a34:	f003 fa46 	bl	8003ec4 <siprintf>

	HAL_UART_Transmit(&huart2, (uint8_t*) tx_buffer, sizeof(tx_buffer), 150);
 8000a38:	f107 010c 	add.w	r1, r7, #12
 8000a3c:	2396      	movs	r3, #150	; 0x96
 8000a3e:	2264      	movs	r2, #100	; 0x64
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <send_message+0x44>)
 8000a42:	f002 f93b 	bl	8002cbc <HAL_UART_Transmit>
}
 8000a46:	bf00      	nop
 8000a48:	3770      	adds	r7, #112	; 0x70
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	08004858 	.word	0x08004858
 8000a54:	20000114 	.word	0x20000114

08000a58 <parse_message>:
//********************************************************************************************


//-----функция обработки принятых сообщений---------------------------------------------------
//--------------------------------------------------------------------------------------------
void parse_message(uint8_t *income_message, int message_size){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0a8      	sub	sp, #160	; 0xa0
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]

	//для отладки
	//#ifdef TEST
	HAL_UART_Transmit(&huart2,  (uint8_t*) income_message, 40, 100);
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	2228      	movs	r2, #40	; 0x28
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	488f      	ldr	r0, [pc, #572]	; (8000ca8 <parse_message+0x250>)
 8000a6a:	f002 f927 	bl	8002cbc <HAL_UART_Transmit>
	//#endif

	uint8_t separator_count = 0;		 	//количество сепараторов
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	uint16_t sep_indexes[5] = {0};			//адреса сепараторов в строке
 8000a74:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	811a      	strh	r2, [r3, #8]

	//проверка на наличие сепараторов
	for(int sep_index = 0; sep_index < message_size; sep_index++){
 8000a80:	2300      	movs	r3, #0
 8000a82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000a86:	e021      	b.n	8000acc <parse_message+0x74>

		// Если обнаружен '|' -> определяем его адрес
		char message_element = (char*) income_message[sep_index];
 8000a88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	4413      	add	r3, r2
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
		if(message_element == '|')
 8000a96:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8000a9a:	2b7c      	cmp	r3, #124	; 0x7c
 8000a9c:	d10d      	bne.n	8000aba <parse_message+0x62>
			sep_indexes[separator_count++] = sep_index;
 8000a9e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	f887 209f 	strb.w	r2, [r7, #159]	; 0x9f
 8000aa8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000aac:	b292      	uxth	r2, r2
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000ab4:	440b      	add	r3, r1
 8000ab6:	f823 2c24 	strh.w	r2, [r3, #-36]

		if(separator_count >= 5)
 8000aba:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	d80a      	bhi.n	8000ad8 <parse_message+0x80>
	for(int sep_index = 0; sep_index < message_size; sep_index++){
 8000ac2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000acc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	dbd8      	blt.n	8000a88 <parse_message+0x30>
 8000ad6:	e000      	b.n	8000ada <parse_message+0x82>
			break;
 8000ad8:	bf00      	nop
	}


	//Разделение сообщения на части по сепараторам
	//********************************************
	uint8_t array_index = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	int command_numbers[4] = {0};
 8000ae0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
	uint8_t part_buffer[4][20] = {0};
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	2250      	movs	r2, #80	; 0x50
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f003 f9db 	bl	8003eb2 <memset>
	for(int sep_index = 0; sep_index < 4; sep_index++, array_index++){
 8000afc:	2300      	movs	r3, #0
 8000afe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000b02:	e0c7      	b.n	8000c94 <parse_message+0x23c>
		uint16_t s_index = sep_indexes[sep_index];
 8000b04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000b0e:	4413      	add	r3, r2
 8000b10:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8000b14:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		memccpy(part_buffer[array_index], &income_message[s_index+1], '|', 20);
 8000b18:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8000b1c:	f107 011c 	add.w	r1, r7, #28
 8000b20:	4613      	mov	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	4413      	add	r3, r2
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	18c8      	adds	r0, r1, r3
 8000b2a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8000b2e:	3301      	adds	r3, #1
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	18d1      	adds	r1, r2, r3
 8000b34:	2314      	movs	r3, #20
 8000b36:	227c      	movs	r2, #124	; 0x7c
 8000b38:	f003 f99e 	bl	8003e78 <memccpy>

		// Remove '|' symbol from sub-string
		for(int ind_symbol = 0; ind_symbol < sizeof(part_buffer[array_index]); ind_symbol++){
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000b42:	e028      	b.n	8000b96 <parse_message+0x13e>
			char message_element = (char*) part_buffer[array_index][ind_symbol];
 8000b44:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8000b48:	4613      	mov	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	4413      	add	r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000b54:	441a      	add	r2, r3
 8000b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b5a:	4413      	add	r3, r2
 8000b5c:	3b84      	subs	r3, #132	; 0x84
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if(message_element == '|'){
 8000b64:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000b68:	2b7c      	cmp	r3, #124	; 0x7c
 8000b6a:	d10f      	bne.n	8000b8c <parse_message+0x134>
				part_buffer[array_index][ind_symbol] = 0;
 8000b6c:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8000b70:	4613      	mov	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000b7c:	441a      	add	r2, r3
 8000b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b82:	4413      	add	r3, r2
 8000b84:	3b84      	subs	r3, #132	; 0x84
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
				break;
 8000b8a:	e008      	b.n	8000b9e <parse_message+0x146>
		for(int ind_symbol = 0; ind_symbol < sizeof(part_buffer[array_index]); ind_symbol++){
 8000b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b90:	3301      	adds	r3, #1
 8000b92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b9a:	2b13      	cmp	r3, #19
 8000b9c:	d9d2      	bls.n	8000b44 <parse_message+0xec>
			}
		}

		// Now we have substrings, let's convert them into numbers
		char string_buffer[20] = {0};
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
		strcpy(string_buffer, part_buffer[array_index]);
 8000bb0:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8000bb4:	f107 011c 	add.w	r1, r7, #28
 8000bb8:	4613      	mov	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	18ca      	adds	r2, r1, r3
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 f99b 	bl	8003f04 <strcpy>

		command_numbers[sep_index] = strtol(string_buffer, NULL, 2);
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f003 fa20 	bl	800401c <strtol>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000be8:	440b      	add	r3, r1
 8000bea:	f843 2c34 	str.w	r2, [r3, #-52]

		recieved_commands[sep_index] = command_numbers[sep_index];
 8000bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000bf8:	4413      	add	r3, r2
 8000bfa:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8000bfe:	492b      	ldr	r1, [pc, #172]	; (8000cac <parse_message+0x254>)
 8000c00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		memset(string_buffer, 0, 20);
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	2214      	movs	r2, #20
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 f94e 	bl	8003eb2 <memset>
		sprintf((char*) string_buffer, "%d", command_numbers[sep_index]);
 8000c16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000c20:	4413      	add	r3, r2
 8000c22:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	4921      	ldr	r1, [pc, #132]	; (8000cb0 <parse_message+0x258>)
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f003 f949 	bl	8003ec4 <siprintf>
		HAL_UART_Transmit(&huart2,  (uint8_t*) "\n", 1, 100);
 8000c32:	2364      	movs	r3, #100	; 0x64
 8000c34:	2201      	movs	r2, #1
 8000c36:	491f      	ldr	r1, [pc, #124]	; (8000cb4 <parse_message+0x25c>)
 8000c38:	481b      	ldr	r0, [pc, #108]	; (8000ca8 <parse_message+0x250>)
 8000c3a:	f002 f83f 	bl	8002cbc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,  (uint8_t*) part_buffer[array_index], 20, 100);
 8000c3e:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8000c42:	f107 011c 	add.w	r1, r7, #28
 8000c46:	4613      	mov	r3, r2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	4413      	add	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4419      	add	r1, r3
 8000c50:	2364      	movs	r3, #100	; 0x64
 8000c52:	2214      	movs	r2, #20
 8000c54:	4814      	ldr	r0, [pc, #80]	; (8000ca8 <parse_message+0x250>)
 8000c56:	f002 f831 	bl	8002cbc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,  (uint8_t*) "\n", 1, 100);
 8000c5a:	2364      	movs	r3, #100	; 0x64
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4915      	ldr	r1, [pc, #84]	; (8000cb4 <parse_message+0x25c>)
 8000c60:	4811      	ldr	r0, [pc, #68]	; (8000ca8 <parse_message+0x250>)
 8000c62:	f002 f82b 	bl	8002cbc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,  (uint8_t*) string_buffer, 20, 100);
 8000c66:	f107 0108 	add.w	r1, r7, #8
 8000c6a:	2364      	movs	r3, #100	; 0x64
 8000c6c:	2214      	movs	r2, #20
 8000c6e:	480e      	ldr	r0, [pc, #56]	; (8000ca8 <parse_message+0x250>)
 8000c70:	f002 f824 	bl	8002cbc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,  (uint8_t*) "\n", 1, 100);
 8000c74:	2364      	movs	r3, #100	; 0x64
 8000c76:	2201      	movs	r2, #1
 8000c78:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <parse_message+0x25c>)
 8000c7a:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <parse_message+0x250>)
 8000c7c:	f002 f81e 	bl	8002cbc <HAL_UART_Transmit>
	for(int sep_index = 0; sep_index < 4; sep_index++, array_index++){
 8000c80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c84:	3301      	adds	r3, #1
 8000c86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000c8a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000c8e:	3301      	adds	r3, #1
 8000c90:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000c94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c98:	2b03      	cmp	r3, #3
 8000c9a:	f77f af33 	ble.w	8000b04 <parse_message+0xac>
	}
	//--------------------------------------------

	//return income_message;
}
 8000c9e:	bf00      	nop
 8000ca0:	bf00      	nop
 8000ca2:	37a0      	adds	r7, #160	; 0xa0
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000114 	.word	0x20000114
 8000cac:	200000f4 	.word	0x200000f4
 8000cb0:	08004864 	.word	0x08004864
 8000cb4:	08004868 	.word	0x08004868

08000cb8 <HAL_UART_RxCpltCallback>:


//-----прерывание от USART--------------------------------------------------------------------
//--------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b09e      	sub	sp, #120	; 0x78
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	//|011000|1000000|11111|110011|#
	uint8_t check_string[sizeof(rx_buffer)] = {0};
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	2260      	movs	r2, #96	; 0x60
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f003 f8f0 	bl	8003eb2 <memset>

	for(int index = 0; index < sizeof(rx_buffer); index++){
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	677b      	str	r3, [r7, #116]	; 0x74
 8000cd6:	e02f      	b.n	8000d38 <HAL_UART_RxCpltCallback+0x80>
		if(rx_buffer[index] == '#'){
 8000cd8:	4a1d      	ldr	r2, [pc, #116]	; (8000d50 <HAL_UART_RxCpltCallback+0x98>)
 8000cda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000cdc:	4413      	add	r3, r2
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b23      	cmp	r3, #35	; 0x23
 8000ce2:	d11c      	bne.n	8000d1e <HAL_UART_RxCpltCallback+0x66>
			// Parse new message and split to params:
			parse_message(&check_string[0], sizeof(rx_buffer));
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2164      	movs	r1, #100	; 0x64
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff feb4 	bl	8000a58 <parse_message>

			// Check new command:
			check_commands();
 8000cf0:	f000 f832 	bl	8000d58 <check_commands>

			for(int buf_index = 0; buf_index < sizeof(rx_buffer); buf_index++){
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	673b      	str	r3, [r7, #112]	; 0x70
 8000cf8:	e00d      	b.n	8000d16 <HAL_UART_RxCpltCallback+0x5e>
				check_string[buf_index] = 0;
 8000cfa:	f107 020c 	add.w	r2, r7, #12
 8000cfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d00:	4413      	add	r3, r2
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
				rx_buffer[buf_index] = 0;
 8000d06:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <HAL_UART_RxCpltCallback+0x98>)
 8000d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d0a:	4413      	add	r3, r2
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
			for(int buf_index = 0; buf_index < sizeof(rx_buffer); buf_index++){
 8000d10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d12:	3301      	adds	r3, #1
 8000d14:	673b      	str	r3, [r7, #112]	; 0x70
 8000d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d18:	2b63      	cmp	r3, #99	; 0x63
 8000d1a:	d9ee      	bls.n	8000cfa <HAL_UART_RxCpltCallback+0x42>
 8000d1c:	e009      	b.n	8000d32 <HAL_UART_RxCpltCallback+0x7a>
			}
		}
		else{
			check_string[index] = rx_buffer[index];
 8000d1e:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <HAL_UART_RxCpltCallback+0x98>)
 8000d20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d22:	4413      	add	r3, r2
 8000d24:	7819      	ldrb	r1, [r3, #0]
 8000d26:	f107 020c 	add.w	r2, r7, #12
 8000d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d2c:	4413      	add	r3, r2
 8000d2e:	460a      	mov	r2, r1
 8000d30:	701a      	strb	r2, [r3, #0]
	for(int index = 0; index < sizeof(rx_buffer); index++){
 8000d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d34:	3301      	adds	r3, #1
 8000d36:	677b      	str	r3, [r7, #116]	; 0x74
 8000d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d3a:	2b63      	cmp	r3, #99	; 0x63
 8000d3c:	d9cc      	bls.n	8000cd8 <HAL_UART_RxCpltCallback+0x20>
		}
	}

	HAL_UART_Receive_IT(&huart2, rx_buffer, 31);
 8000d3e:	221f      	movs	r2, #31
 8000d40:	4903      	ldr	r1, [pc, #12]	; (8000d50 <HAL_UART_RxCpltCallback+0x98>)
 8000d42:	4804      	ldr	r0, [pc, #16]	; (8000d54 <HAL_UART_RxCpltCallback+0x9c>)
 8000d44:	f002 f84e 	bl	8002de4 <HAL_UART_Receive_IT>
}
 8000d48:	bf00      	nop
 8000d4a:	3778      	adds	r7, #120	; 0x78
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000090 	.word	0x20000090
 8000d54:	20000114 	.word	0x20000114

08000d58 <check_commands>:
//********************************************************************************************


//-----обработка входящей команды--------------------------------------------------------------------
//--------------------------------------------------------------------------------------------
void check_commands(){
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0

	enum{
		HEADER, COMMAND, VALUE, END_POINT
	};

	switch(recieved_commands[COMMAND]){
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <check_commands+0xa4>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b40      	cmp	r3, #64	; 0x40
 8000d64:	d00a      	beq.n	8000d7c <check_commands+0x24>
 8000d66:	2b40      	cmp	r3, #64	; 0x40
 8000d68:	dc41      	bgt.n	8000dee <check_commands+0x96>
 8000d6a:	2b10      	cmp	r3, #16
 8000d6c:	d00f      	beq.n	8000d8e <check_commands+0x36>
 8000d6e:	2b10      	cmp	r3, #16
 8000d70:	dc3d      	bgt.n	8000dee <check_commands+0x96>
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	d014      	beq.n	8000da0 <check_commands+0x48>
 8000d76:	2b0c      	cmp	r3, #12
 8000d78:	d01e      	beq.n	8000db8 <check_commands+0x60>
				case VALUE_GET_OPT2_TEMP:
					// GET TEMPERATURE FROM OPT SENSOR #2
					break;
			}break;
	}
}
 8000d7a:	e038      	b.n	8000dee <check_commands+0x96>
			switch(recieved_commands[VALUE]){
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <check_commands+0xa4>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d002      	beq.n	8000d8a <check_commands+0x32>
 8000d84:	2b1f      	cmp	r3, #31
 8000d86:	d12b      	bne.n	8000de0 <check_commands+0x88>
					break;
 8000d88:	e000      	b.n	8000d8c <check_commands+0x34>
					break;
 8000d8a:	bf00      	nop
			}break;
 8000d8c:	e028      	b.n	8000de0 <check_commands+0x88>
			switch(recieved_commands[VALUE]){
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <check_commands+0xa4>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d002      	beq.n	8000d9c <check_commands+0x44>
 8000d96:	2b1f      	cmp	r3, #31
 8000d98:	d124      	bne.n	8000de4 <check_commands+0x8c>
					break;
 8000d9a:	e000      	b.n	8000d9e <check_commands+0x46>
					break;
 8000d9c:	bf00      	nop
			}break;
 8000d9e:	e021      	b.n	8000de4 <check_commands+0x8c>
			if(recieved_commands[VALUE] > LASER_MIN_TEMP && recieved_commands[VALUE] < LASER_MAX_TEMP){
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <check_commands+0xa4>)
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	2b0a      	cmp	r3, #10
 8000da6:	dd1f      	ble.n	8000de8 <check_commands+0x90>
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <check_commands+0xa4>)
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	2b27      	cmp	r3, #39	; 0x27
 8000dae:	dc1b      	bgt.n	8000de8 <check_commands+0x90>
				int set_laser_temperature = recieved_commands[VALUE]; // Set laser temperature
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <check_commands+0xa4>)
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	607b      	str	r3, [r7, #4]
			}break;
 8000db6:	e017      	b.n	8000de8 <check_commands+0x90>
			switch(recieved_commands[VALUE]){
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <check_commands+0xa4>)
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	d814      	bhi.n	8000dec <check_commands+0x94>
 8000dc2:	a201      	add	r2, pc, #4	; (adr r2, 8000dc8 <check_commands+0x70>)
 8000dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc8:	08000ddd 	.word	0x08000ddd
 8000dcc:	08000ddd 	.word	0x08000ddd
 8000dd0:	08000ddd 	.word	0x08000ddd
 8000dd4:	08000ddd 	.word	0x08000ddd
 8000dd8:	08000ddd 	.word	0x08000ddd
					break;
 8000ddc:	bf00      	nop
			}break;
 8000dde:	e005      	b.n	8000dec <check_commands+0x94>
			}break;
 8000de0:	bf00      	nop
 8000de2:	e004      	b.n	8000dee <check_commands+0x96>
			}break;
 8000de4:	bf00      	nop
 8000de6:	e002      	b.n	8000dee <check_commands+0x96>
			}break;
 8000de8:	bf00      	nop
 8000dea:	e000      	b.n	8000dee <check_commands+0x96>
			}break;
 8000dec:	bf00      	nop
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	200000f4 	.word	0x200000f4

08000e00 <uart_do_work>:
//********************************************************************************************


//-----главный цикл программы--------------------------------------------------------------------
//--------------------------------------------------------------------------------------------
void uart_do_work(){
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

	while(1){

		if(is_new_message){
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <uart_do_work+0x14>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d0fb      	beq.n	8000e04 <uart_do_work+0x4>

			//send_message(parse_message(""));
			//HAL_UART_Receive_DMA(&huart2, rx_buffer, 100);
			//HAL_UART_Transmit(&huart2,  (uint8_t*) rx_buffer, 12, 100);
			//HAL_UART_Receive_DMA(&huart2,  (uint8_t*) rx_buffer, 12);
			is_new_message = 0;
 8000e0c:	4b01      	ldr	r3, [pc, #4]	; (8000e14 <uart_do_work+0x14>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
		if(is_new_message){
 8000e12:	e7f7      	b.n	8000e04 <uart_do_work+0x4>
 8000e14:	20000108 	.word	0x20000108

08000e18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e1c:	f7ff fdb0 	bl	8000980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e22:	e003      	b.n	8000e2c <LoopCopyDataInit>

08000e24 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e26:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e28:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e2a:	3104      	adds	r1, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e2c:	480a      	ldr	r0, [pc, #40]	; (8000e58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e30:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e32:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e34:	d3f6      	bcc.n	8000e24 <CopyDataInit>
	ldr	r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e38:	e002      	b.n	8000e40 <LoopFillZerobss>

08000e3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e3a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e3c:	f842 3b04 	str.w	r3, [r2], #4

08000e40 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <LoopForever+0x16>)
	cmp	r2, r3
 8000e42:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e44:	d3f9      	bcc.n	8000e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e46:	f002 fff3 	bl	8003e30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e4a:	f7ff fb8d 	bl	8000568 <main>

08000e4e <LoopForever>:

LoopForever:
    b LoopForever
 8000e4e:	e7fe      	b.n	8000e4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e50:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e54:	080049f8 	.word	0x080049f8
	ldr	r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e5c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000e60:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000e64:	200001ac 	.word	0x200001ac

08000e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC1_2_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_Init+0x3c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <HAL_Init+0x3c>)
 8000e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e80:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e82:	2003      	movs	r0, #3
 8000e84:	f000 f93e 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f000 f80f 	bl	8000eac <HAL_InitTick>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	71fb      	strb	r3, [r7, #7]
 8000e98:	e001      	b.n	8000e9e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e9a:	f7ff fc7f 	bl	800079c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40022000 	.word	0x40022000

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <HAL_InitTick+0x6c>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d023      	beq.n	8000f08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ec0:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_InitTick+0x70>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_InitTick+0x6c>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f949 	bl	800116e <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10f      	bne.n	8000f02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d809      	bhi.n	8000efc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f000 f913 	bl	800111a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_InitTick+0x74>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	e007      	b.n	8000f0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	73fb      	strb	r3, [r7, #15]
 8000f00:	e004      	b.n	8000f0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	e001      	b.n	8000f0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000198 	.word	0x20000198

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000198 	.word	0x20000198

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db0b      	blt.n	8000ff2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4907      	ldr	r1, [pc, #28]	; (8001000 <__NVIC_EnableIRQ+0x38>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000e100 	.word	0xe000e100

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	; (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	; (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d0:	d301      	bcc.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00f      	b.n	80010f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <SysTick_Config+0x40>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	210f      	movs	r1, #15
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f7ff ff8e 	bl	8001004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SysTick_Config+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SysTick_Config+0x40>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff29 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800112c:	f7ff ff3e 	bl	8000fac <__NVIC_GetPriorityGrouping>
 8001130:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff8e 	bl	8001058 <NVIC_EncodePriority>
 800113c:	4602      	mov	r2, r0
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff5d 	bl	8001004 <__NVIC_SetPriority>
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff31 	bl	8000fc8 <__NVIC_EnableIRQ>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ffa2 	bl	80010c0 <SysTick_Config>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001186:	b480      	push	{r7}
 8001188:	b085      	sub	sp, #20
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d008      	beq.n	80011b0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2204      	movs	r2, #4
 80011a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e022      	b.n	80011f6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 020e 	bic.w	r2, r2, #14
 80011be:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0201 	bic.w	r2, r2, #1
 80011ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d4:	f003 021c 	and.w	r2, r3, #28
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	2101      	movs	r1, #1
 80011de:	fa01 f202 	lsl.w	r2, r1, r2
 80011e2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d005      	beq.n	8001226 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2204      	movs	r2, #4
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	e029      	b.n	800127a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 020e 	bic.w	r2, r2, #14
 8001234:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 0201 	bic.w	r2, r2, #1
 8001244:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f003 021c 	and.w	r2, r3, #28
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	2101      	movs	r1, #1
 8001254:	fa01 f202 	lsl.w	r2, r1, r2
 8001258:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	4798      	blx	r3
    }
  }
  return status;
 800127a:	7bfb      	ldrb	r3, [r7, #15]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001284:	b480      	push	{r7}
 8001286:	b087      	sub	sp, #28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001292:	e17f      	b.n	8001594 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2101      	movs	r1, #1
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	4013      	ands	r3, r2
 80012a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 8171 	beq.w	800158e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d00b      	beq.n	80012cc <HAL_GPIO_Init+0x48>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d007      	beq.n	80012cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c0:	2b11      	cmp	r3, #17
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b12      	cmp	r3, #18
 80012ca:	d130      	bne.n	800132e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001302:	2201      	movs	r2, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	f003 0201 	and.w	r2, r3, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b03      	cmp	r3, #3
 8001338:	d118      	bne.n	800136c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001340:	2201      	movs	r2, #1
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	08db      	lsrs	r3, r3, #3
 8001356:	f003 0201 	and.w	r2, r3, #1
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x128>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b12      	cmp	r3, #18
 80013aa:	d123      	bne.n	80013f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	08da      	lsrs	r2, r3, #3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3208      	adds	r2, #8
 80013b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	220f      	movs	r2, #15
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	691a      	ldr	r2, [r3, #16]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	08da      	lsrs	r2, r3, #3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3208      	adds	r2, #8
 80013ee:	6939      	ldr	r1, [r7, #16]
 80013f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0203 	and.w	r2, r3, #3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80ac 	beq.w	800158e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	4b5f      	ldr	r3, [pc, #380]	; (80015b4 <HAL_GPIO_Init+0x330>)
 8001438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143a:	4a5e      	ldr	r2, [pc, #376]	; (80015b4 <HAL_GPIO_Init+0x330>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6613      	str	r3, [r2, #96]	; 0x60
 8001442:	4b5c      	ldr	r3, [pc, #368]	; (80015b4 <HAL_GPIO_Init+0x330>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800144e:	4a5a      	ldr	r2, [pc, #360]	; (80015b8 <HAL_GPIO_Init+0x334>)
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	3302      	adds	r3, #2
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	220f      	movs	r2, #15
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001478:	d025      	beq.n	80014c6 <HAL_GPIO_Init+0x242>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4f      	ldr	r2, [pc, #316]	; (80015bc <HAL_GPIO_Init+0x338>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d01f      	beq.n	80014c2 <HAL_GPIO_Init+0x23e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4e      	ldr	r2, [pc, #312]	; (80015c0 <HAL_GPIO_Init+0x33c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d019      	beq.n	80014be <HAL_GPIO_Init+0x23a>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4d      	ldr	r2, [pc, #308]	; (80015c4 <HAL_GPIO_Init+0x340>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d013      	beq.n	80014ba <HAL_GPIO_Init+0x236>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4c      	ldr	r2, [pc, #304]	; (80015c8 <HAL_GPIO_Init+0x344>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d00d      	beq.n	80014b6 <HAL_GPIO_Init+0x232>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4b      	ldr	r2, [pc, #300]	; (80015cc <HAL_GPIO_Init+0x348>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d007      	beq.n	80014b2 <HAL_GPIO_Init+0x22e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4a      	ldr	r2, [pc, #296]	; (80015d0 <HAL_GPIO_Init+0x34c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d101      	bne.n	80014ae <HAL_GPIO_Init+0x22a>
 80014aa:	2306      	movs	r3, #6
 80014ac:	e00c      	b.n	80014c8 <HAL_GPIO_Init+0x244>
 80014ae:	2307      	movs	r3, #7
 80014b0:	e00a      	b.n	80014c8 <HAL_GPIO_Init+0x244>
 80014b2:	2305      	movs	r3, #5
 80014b4:	e008      	b.n	80014c8 <HAL_GPIO_Init+0x244>
 80014b6:	2304      	movs	r3, #4
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x244>
 80014ba:	2303      	movs	r3, #3
 80014bc:	e004      	b.n	80014c8 <HAL_GPIO_Init+0x244>
 80014be:	2302      	movs	r3, #2
 80014c0:	e002      	b.n	80014c8 <HAL_GPIO_Init+0x244>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <HAL_GPIO_Init+0x244>
 80014c6:	2300      	movs	r3, #0
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	f002 0203 	and.w	r2, r2, #3
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	4093      	lsls	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014d8:	4937      	ldr	r1, [pc, #220]	; (80015b8 <HAL_GPIO_Init+0x334>)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	3302      	adds	r3, #2
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014e6:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <HAL_GPIO_Init+0x350>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800150a:	4a32      	ldr	r2, [pc, #200]	; (80015d4 <HAL_GPIO_Init+0x350>)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001510:	4b30      	ldr	r3, [pc, #192]	; (80015d4 <HAL_GPIO_Init+0x350>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001534:	4a27      	ldr	r2, [pc, #156]	; (80015d4 <HAL_GPIO_Init+0x350>)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <HAL_GPIO_Init+0x350>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800155e:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <HAL_GPIO_Init+0x350>)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_GPIO_Init+0x350>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	43db      	mvns	r3, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001588:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <HAL_GPIO_Init+0x350>)
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa22 f303 	lsr.w	r3, r2, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f47f ae78 	bne.w	8001294 <HAL_GPIO_Init+0x10>
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	371c      	adds	r7, #28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40010000 	.word	0x40010000
 80015bc:	48000400 	.word	0x48000400
 80015c0:	48000800 	.word	0x48000800
 80015c4:	48000c00 	.word	0x48000c00
 80015c8:	48001000 	.word	0x48001000
 80015cc:	48001400 	.word	0x48001400
 80015d0:	48001800 	.word	0x48001800
 80015d4:	40010400 	.word	0x40010400

080015d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
 80015e4:	4613      	mov	r3, r2
 80015e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e8:	787b      	ldrb	r3, [r7, #1]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <HAL_PWREx_GetVoltageRange+0x18>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40007000 	.word	0x40007000

08001624 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001632:	d130      	bne.n	8001696 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001634:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800163c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001640:	d038      	beq.n	80016b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001642:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800164a:	4a1e      	ldr	r2, [pc, #120]	; (80016c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001650:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2232      	movs	r2, #50	; 0x32
 8001658:	fb02 f303 	mul.w	r3, r2, r3
 800165c:	4a1b      	ldr	r2, [pc, #108]	; (80016cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	0c9b      	lsrs	r3, r3, #18
 8001664:	3301      	adds	r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001668:	e002      	b.n	8001670 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3b01      	subs	r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167c:	d102      	bne.n	8001684 <HAL_PWREx_ControlVoltageScaling+0x60>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f2      	bne.n	800166a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800168c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001690:	d110      	bne.n	80016b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e00f      	b.n	80016b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800169e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016a2:	d007      	beq.n	80016b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016ac:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40007000 	.word	0x40007000
 80016c8:	20000000 	.word	0x20000000
 80016cc:	431bde83 	.word	0x431bde83

080016d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e3d4      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016e2:	4ba1      	ldr	r3, [pc, #644]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016ec:	4b9e      	ldr	r3, [pc, #632]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 80e4 	beq.w	80018cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d007      	beq.n	800171a <HAL_RCC_OscConfig+0x4a>
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	2b0c      	cmp	r3, #12
 800170e:	f040 808b 	bne.w	8001828 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b01      	cmp	r3, #1
 8001716:	f040 8087 	bne.w	8001828 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800171a:	4b93      	ldr	r3, [pc, #588]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <HAL_RCC_OscConfig+0x62>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e3ac      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1a      	ldr	r2, [r3, #32]
 8001736:	4b8c      	ldr	r3, [pc, #560]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d004      	beq.n	800174c <HAL_RCC_OscConfig+0x7c>
 8001742:	4b89      	ldr	r3, [pc, #548]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800174a:	e005      	b.n	8001758 <HAL_RCC_OscConfig+0x88>
 800174c:	4b86      	ldr	r3, [pc, #536]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 800174e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001752:	091b      	lsrs	r3, r3, #4
 8001754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001758:	4293      	cmp	r3, r2
 800175a:	d223      	bcs.n	80017a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	4618      	mov	r0, r3
 8001762:	f000 fd41 	bl	80021e8 <RCC_SetFlashLatencyFromMSIRange>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e38d      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001770:	4b7d      	ldr	r3, [pc, #500]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a7c      	ldr	r2, [pc, #496]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001776:	f043 0308 	orr.w	r3, r3, #8
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b7a      	ldr	r3, [pc, #488]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	4977      	ldr	r1, [pc, #476]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 800178a:	4313      	orrs	r3, r2
 800178c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800178e:	4b76      	ldr	r3, [pc, #472]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	021b      	lsls	r3, r3, #8
 800179c:	4972      	ldr	r1, [pc, #456]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	604b      	str	r3, [r1, #4]
 80017a2:	e025      	b.n	80017f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017a4:	4b70      	ldr	r3, [pc, #448]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a6f      	ldr	r2, [pc, #444]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 80017aa:	f043 0308 	orr.w	r3, r3, #8
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b6d      	ldr	r3, [pc, #436]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	496a      	ldr	r1, [pc, #424]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017c2:	4b69      	ldr	r3, [pc, #420]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	4965      	ldr	r1, [pc, #404]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d109      	bne.n	80017f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fd01 	bl	80021e8 <RCC_SetFlashLatencyFromMSIRange>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e34d      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017f0:	f000 fc36 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 80017f4:	4602      	mov	r2, r0
 80017f6:	4b5c      	ldr	r3, [pc, #368]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	495a      	ldr	r1, [pc, #360]	; (800196c <HAL_RCC_OscConfig+0x29c>)
 8001802:	5ccb      	ldrb	r3, [r1, r3]
 8001804:	f003 031f 	and.w	r3, r3, #31
 8001808:	fa22 f303 	lsr.w	r3, r2, r3
 800180c:	4a58      	ldr	r2, [pc, #352]	; (8001970 <HAL_RCC_OscConfig+0x2a0>)
 800180e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001810:	4b58      	ldr	r3, [pc, #352]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fb49 	bl	8000eac <HAL_InitTick>
 800181a:	4603      	mov	r3, r0
 800181c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d052      	beq.n	80018ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	e331      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d032      	beq.n	8001896 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001830:	4b4d      	ldr	r3, [pc, #308]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a4c      	ldr	r2, [pc, #304]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800183c:	f7ff fb86 	bl	8000f4c <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001844:	f7ff fb82 	bl	8000f4c <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e31a      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001856:	4b44      	ldr	r3, [pc, #272]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001862:	4b41      	ldr	r3, [pc, #260]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a40      	ldr	r2, [pc, #256]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001868:	f043 0308 	orr.w	r3, r3, #8
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	4b3e      	ldr	r3, [pc, #248]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	493b      	ldr	r1, [pc, #236]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 800187c:	4313      	orrs	r3, r2
 800187e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001880:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	4936      	ldr	r1, [pc, #216]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
 8001894:	e01a      	b.n	80018cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001896:	4b34      	ldr	r3, [pc, #208]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a33      	ldr	r2, [pc, #204]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018a2:	f7ff fb53 	bl	8000f4c <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018aa:	f7ff fb4f 	bl	8000f4c <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e2e7      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018bc:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f0      	bne.n	80018aa <HAL_RCC_OscConfig+0x1da>
 80018c8:	e000      	b.n	80018cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d074      	beq.n	80019c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d005      	beq.n	80018ea <HAL_RCC_OscConfig+0x21a>
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b0c      	cmp	r3, #12
 80018e2:	d10e      	bne.n	8001902 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d10b      	bne.n	8001902 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d064      	beq.n	80019c0 <HAL_RCC_OscConfig+0x2f0>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d160      	bne.n	80019c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e2c4      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190a:	d106      	bne.n	800191a <HAL_RCC_OscConfig+0x24a>
 800190c:	4b16      	ldr	r3, [pc, #88]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a15      	ldr	r2, [pc, #84]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	e01d      	b.n	8001956 <HAL_RCC_OscConfig+0x286>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001922:	d10c      	bne.n	800193e <HAL_RCC_OscConfig+0x26e>
 8001924:	4b10      	ldr	r3, [pc, #64]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0f      	ldr	r2, [pc, #60]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 800192a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0c      	ldr	r2, [pc, #48]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	e00b      	b.n	8001956 <HAL_RCC_OscConfig+0x286>
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a09      	ldr	r2, [pc, #36]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a06      	ldr	r2, [pc, #24]	; (8001968 <HAL_RCC_OscConfig+0x298>)
 8001950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001954:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d01c      	beq.n	8001998 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195e:	f7ff faf5 	bl	8000f4c <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001964:	e011      	b.n	800198a <HAL_RCC_OscConfig+0x2ba>
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
 800196c:	0800486c 	.word	0x0800486c
 8001970:	20000000 	.word	0x20000000
 8001974:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff fae8 	bl	8000f4c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e280      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800198a:	4baf      	ldr	r3, [pc, #700]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0x2a8>
 8001996:	e014      	b.n	80019c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff fad8 	bl	8000f4c <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff fad4 	bl	8000f4c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e26c      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019b2:	4ba5      	ldr	r3, [pc, #660]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x2d0>
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d060      	beq.n	8001a90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_OscConfig+0x310>
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2b0c      	cmp	r3, #12
 80019d8:	d119      	bne.n	8001a0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d116      	bne.n	8001a0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e0:	4b99      	ldr	r3, [pc, #612]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_RCC_OscConfig+0x328>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e249      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f8:	4b93      	ldr	r3, [pc, #588]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	061b      	lsls	r3, r3, #24
 8001a06:	4990      	ldr	r1, [pc, #576]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a0c:	e040      	b.n	8001a90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d023      	beq.n	8001a5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a16:	4b8c      	ldr	r3, [pc, #560]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a8b      	ldr	r2, [pc, #556]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7ff fa93 	bl	8000f4c <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2a:	f7ff fa8f 	bl	8000f4c <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e227      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a3c:	4b82      	ldr	r3, [pc, #520]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a48:	4b7f      	ldr	r3, [pc, #508]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	061b      	lsls	r3, r3, #24
 8001a56:	497c      	ldr	r1, [pc, #496]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
 8001a5c:	e018      	b.n	8001a90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5e:	4b7a      	ldr	r3, [pc, #488]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a79      	ldr	r2, [pc, #484]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6a:	f7ff fa6f 	bl	8000f4c <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a72:	f7ff fa6b 	bl	8000f4c <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e203      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a84:	4b70      	ldr	r3, [pc, #448]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f0      	bne.n	8001a72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d03c      	beq.n	8001b16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d01c      	beq.n	8001ade <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa4:	4b68      	ldr	r3, [pc, #416]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aaa:	4a67      	ldr	r2, [pc, #412]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab4:	f7ff fa4a 	bl	8000f4c <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001abc:	f7ff fa46 	bl	8000f4c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e1de      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ace:	4b5e      	ldr	r3, [pc, #376]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0ef      	beq.n	8001abc <HAL_RCC_OscConfig+0x3ec>
 8001adc:	e01b      	b.n	8001b16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ade:	4b5a      	ldr	r3, [pc, #360]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae4:	4a58      	ldr	r2, [pc, #352]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aee:	f7ff fa2d 	bl	8000f4c <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af6:	f7ff fa29 	bl	8000f4c <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e1c1      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b08:	4b4f      	ldr	r3, [pc, #316]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1ef      	bne.n	8001af6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 80a6 	beq.w	8001c70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b24:	2300      	movs	r3, #0
 8001b26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b28:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d10d      	bne.n	8001b50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b34:	4b44      	ldr	r3, [pc, #272]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b38:	4a43      	ldr	r2, [pc, #268]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b40:	4b41      	ldr	r3, [pc, #260]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b50:	4b3e      	ldr	r3, [pc, #248]	; (8001c4c <HAL_RCC_OscConfig+0x57c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d118      	bne.n	8001b8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <HAL_RCC_OscConfig+0x57c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a3a      	ldr	r2, [pc, #232]	; (8001c4c <HAL_RCC_OscConfig+0x57c>)
 8001b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b68:	f7ff f9f0 	bl	8000f4c <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b70:	f7ff f9ec 	bl	8000f4c <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e184      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b82:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <HAL_RCC_OscConfig+0x57c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d108      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x4d8>
 8001b96:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9c:	4a2a      	ldr	r2, [pc, #168]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ba6:	e024      	b.n	8001bf2 <HAL_RCC_OscConfig+0x522>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b05      	cmp	r3, #5
 8001bae:	d110      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x502>
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb6:	4a24      	ldr	r2, [pc, #144]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc0:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc6:	4a20      	ldr	r2, [pc, #128]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bd0:	e00f      	b.n	8001bf2 <HAL_RCC_OscConfig+0x522>
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd8:	4a1b      	ldr	r2, [pc, #108]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001bda:	f023 0301 	bic.w	r3, r3, #1
 8001bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001be2:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be8:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001bea:	f023 0304 	bic.w	r3, r3, #4
 8001bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d016      	beq.n	8001c28 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfa:	f7ff f9a7 	bl	8000f4c <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7ff f9a3 	bl	8000f4c <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e139      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_OscConfig+0x578>)
 8001c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0ed      	beq.n	8001c02 <HAL_RCC_OscConfig+0x532>
 8001c26:	e01a      	b.n	8001c5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c28:	f7ff f990 	bl	8000f4c <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c2e:	e00f      	b.n	8001c50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c30:	f7ff f98c 	bl	8000f4c <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d906      	bls.n	8001c50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e122      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c50:	4b90      	ldr	r3, [pc, #576]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1e8      	bne.n	8001c30 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c5e:	7ffb      	ldrb	r3, [r7, #31]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d105      	bne.n	8001c70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c64:	4b8b      	ldr	r3, [pc, #556]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	4a8a      	ldr	r2, [pc, #552]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 8108 	beq.w	8001e8a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	f040 80d0 	bne.w	8001e24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c84:	4b83      	ldr	r3, [pc, #524]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 0203 	and.w	r2, r3, #3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d130      	bne.n	8001cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d127      	bne.n	8001cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d11f      	bne.n	8001cfa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cc4:	2a07      	cmp	r2, #7
 8001cc6:	bf14      	ite	ne
 8001cc8:	2201      	movne	r2, #1
 8001cca:	2200      	moveq	r2, #0
 8001ccc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d113      	bne.n	8001cfa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d109      	bne.n	8001cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	085b      	lsrs	r3, r3, #1
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d06e      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	2b0c      	cmp	r3, #12
 8001cfe:	d069      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d00:	4b64      	ldr	r3, [pc, #400]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d105      	bne.n	8001d18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d0c:	4b61      	ldr	r3, [pc, #388]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0b7      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d1c:	4b5d      	ldr	r3, [pc, #372]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a5c      	ldr	r2, [pc, #368]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d28:	f7ff f910 	bl	8000f4c <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d30:	f7ff f90c 	bl	8000f4c <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e0a4      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d42:	4b54      	ldr	r3, [pc, #336]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d4e:	4b51      	ldr	r3, [pc, #324]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	4b51      	ldr	r3, [pc, #324]	; (8001e98 <HAL_RCC_OscConfig+0x7c8>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d5e:	3a01      	subs	r2, #1
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	4311      	orrs	r1, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d68:	0212      	lsls	r2, r2, #8
 8001d6a:	4311      	orrs	r1, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d70:	0852      	lsrs	r2, r2, #1
 8001d72:	3a01      	subs	r2, #1
 8001d74:	0552      	lsls	r2, r2, #21
 8001d76:	4311      	orrs	r1, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d7c:	0852      	lsrs	r2, r2, #1
 8001d7e:	3a01      	subs	r2, #1
 8001d80:	0652      	lsls	r2, r2, #25
 8001d82:	4311      	orrs	r1, r2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d88:	0912      	lsrs	r2, r2, #4
 8001d8a:	0452      	lsls	r2, r2, #17
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	4941      	ldr	r1, [pc, #260]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d94:	4b3f      	ldr	r3, [pc, #252]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a3e      	ldr	r2, [pc, #248]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001da0:	4b3c      	ldr	r3, [pc, #240]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4a3b      	ldr	r2, [pc, #236]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001daa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dac:	f7ff f8ce 	bl	8000f4c <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db4:	f7ff f8ca 	bl	8000f4c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e062      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc6:	4b33      	ldr	r3, [pc, #204]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dd2:	e05a      	b.n	8001e8a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e059      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd8:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d152      	bne.n	8001e8a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001de4:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a2a      	ldr	r2, [pc, #168]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001df0:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dfc:	f7ff f8a6 	bl	8000f4c <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e04:	f7ff f8a2 	bl	8000f4c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e03a      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e16:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x734>
 8001e22:	e032      	b.n	8001e8a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2b0c      	cmp	r3, #12
 8001e28:	d02d      	beq.n	8001e86 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a19      	ldr	r2, [pc, #100]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001e30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e34:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d105      	bne.n	8001e4e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e42:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	4a13      	ldr	r2, [pc, #76]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001e48:	f023 0303 	bic.w	r3, r3, #3
 8001e4c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	4a10      	ldr	r2, [pc, #64]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001e54:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5e:	f7ff f875 	bl	8000f4c <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e66:	f7ff f871 	bl	8000f4c <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e009      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_RCC_OscConfig+0x7c4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f0      	bne.n	8001e66 <HAL_RCC_OscConfig+0x796>
 8001e84:	e001      	b.n	8001e8a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	f99d808c 	.word	0xf99d808c

08001e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0c8      	b.n	8002042 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b66      	ldr	r3, [pc, #408]	; (800204c <HAL_RCC_ClockConfig+0x1b0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d910      	bls.n	8001ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b63      	ldr	r3, [pc, #396]	; (800204c <HAL_RCC_ClockConfig+0x1b0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 0207 	bic.w	r2, r3, #7
 8001ec6:	4961      	ldr	r1, [pc, #388]	; (800204c <HAL_RCC_ClockConfig+0x1b0>)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b5f      	ldr	r3, [pc, #380]	; (800204c <HAL_RCC_ClockConfig+0x1b0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0b0      	b.n	8002042 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d04c      	beq.n	8001f86 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d107      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef4:	4b56      	ldr	r3, [pc, #344]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d121      	bne.n	8001f44 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e09e      	b.n	8002042 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d107      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0c:	4b50      	ldr	r3, [pc, #320]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d115      	bne.n	8001f44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e092      	b.n	8002042 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d107      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f24:	4b4a      	ldr	r3, [pc, #296]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d109      	bne.n	8001f44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e086      	b.n	8002042 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f34:	4b46      	ldr	r3, [pc, #280]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e07e      	b.n	8002042 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f44:	4b42      	ldr	r3, [pc, #264]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f023 0203 	bic.w	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	493f      	ldr	r1, [pc, #252]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f56:	f7fe fff9 	bl	8000f4c <HAL_GetTick>
 8001f5a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5e:	f7fe fff5 	bl	8000f4c <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e066      	b.n	8002042 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f74:	4b36      	ldr	r3, [pc, #216]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 020c 	and.w	r2, r3, #12
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d1eb      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d008      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f92:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	492c      	ldr	r1, [pc, #176]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b29      	ldr	r3, [pc, #164]	; (800204c <HAL_RCC_ClockConfig+0x1b0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d210      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b26      	ldr	r3, [pc, #152]	; (800204c <HAL_RCC_ClockConfig+0x1b0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 0207 	bic.w	r2, r3, #7
 8001fba:	4924      	ldr	r1, [pc, #144]	; (800204c <HAL_RCC_ClockConfig+0x1b0>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_RCC_ClockConfig+0x1b0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e036      	b.n	8002042 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4918      	ldr	r1, [pc, #96]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ffe:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4910      	ldr	r1, [pc, #64]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002012:	f000 f825 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8002016:	4602      	mov	r2, r0
 8002018:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <HAL_RCC_ClockConfig+0x1b4>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	490c      	ldr	r1, [pc, #48]	; (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8002024:	5ccb      	ldrb	r3, [r1, r3]
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe ff38 	bl	8000eac <HAL_InitTick>
 800203c:	4603      	mov	r3, r0
 800203e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002040:	7afb      	ldrb	r3, [r7, #11]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40022000 	.word	0x40022000
 8002050:	40021000 	.word	0x40021000
 8002054:	0800486c 	.word	0x0800486c
 8002058:	20000000 	.word	0x20000000
 800205c:	20000004 	.word	0x20000004

08002060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800206e:	4b3e      	ldr	r3, [pc, #248]	; (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002078:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x34>
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	2b0c      	cmp	r3, #12
 800208c:	d121      	bne.n	80020d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d11e      	bne.n	80020d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002094:	4b34      	ldr	r3, [pc, #208]	; (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d107      	bne.n	80020b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020a0:	4b31      	ldr	r3, [pc, #196]	; (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	e005      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020b0:	4b2d      	ldr	r3, [pc, #180]	; (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020bc:	4a2b      	ldr	r2, [pc, #172]	; (800216c <HAL_RCC_GetSysClockFreq+0x10c>)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10d      	bne.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d102      	bne.n	80020de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020d8:	4b25      	ldr	r3, [pc, #148]	; (8002170 <HAL_RCC_GetSysClockFreq+0x110>)
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	e004      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020e4:	4b23      	ldr	r3, [pc, #140]	; (8002174 <HAL_RCC_GetSysClockFreq+0x114>)
 80020e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	2b0c      	cmp	r3, #12
 80020ec:	d134      	bne.n	8002158 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020ee:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d003      	beq.n	8002106 <HAL_RCC_GetSysClockFreq+0xa6>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d003      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0xac>
 8002104:	e005      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002106:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <HAL_RCC_GetSysClockFreq+0x110>)
 8002108:	617b      	str	r3, [r7, #20]
      break;
 800210a:	e005      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_RCC_GetSysClockFreq+0x114>)
 800210e:	617b      	str	r3, [r7, #20]
      break;
 8002110:	e002      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	617b      	str	r3, [r7, #20]
      break;
 8002116:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	3301      	adds	r3, #1
 8002124:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	fb02 f203 	mul.w	r2, r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
 800213c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	0e5b      	lsrs	r3, r3, #25
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	3301      	adds	r3, #1
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002158:	69bb      	ldr	r3, [r7, #24]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	; 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	08004884 	.word	0x08004884
 8002170:	00f42400 	.word	0x00f42400
 8002174:	007a1200 	.word	0x007a1200

08002178 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <HAL_RCC_GetHCLKFreq+0x14>)
 800217e:	681b      	ldr	r3, [r3, #0]
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000000 	.word	0x20000000

08002190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002194:	f7ff fff0 	bl	8002178 <HAL_RCC_GetHCLKFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	4904      	ldr	r1, [pc, #16]	; (80021b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40021000 	.word	0x40021000
 80021b8:	0800487c 	.word	0x0800487c

080021bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021c0:	f7ff ffda 	bl	8002178 <HAL_RCC_GetHCLKFreq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	0adb      	lsrs	r3, r3, #11
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	4904      	ldr	r1, [pc, #16]	; (80021e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021d2:	5ccb      	ldrb	r3, [r1, r3]
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	0800487c 	.word	0x0800487c

080021e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021f0:	2300      	movs	r3, #0
 80021f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021f4:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002200:	f7ff fa02 	bl	8001608 <HAL_PWREx_GetVoltageRange>
 8002204:	6178      	str	r0, [r7, #20]
 8002206:	e014      	b.n	8002232 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002208:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800220a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220c:	4a24      	ldr	r2, [pc, #144]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800220e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002212:	6593      	str	r3, [r2, #88]	; 0x58
 8002214:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002220:	f7ff f9f2 	bl	8001608 <HAL_PWREx_GetVoltageRange>
 8002224:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002226:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222a:	4a1d      	ldr	r2, [pc, #116]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002230:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002238:	d10b      	bne.n	8002252 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b80      	cmp	r3, #128	; 0x80
 800223e:	d919      	bls.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2ba0      	cmp	r3, #160	; 0xa0
 8002244:	d902      	bls.n	800224c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002246:	2302      	movs	r3, #2
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	e013      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800224c:	2301      	movs	r3, #1
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	e010      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b80      	cmp	r3, #128	; 0x80
 8002256:	d902      	bls.n	800225e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002258:	2303      	movs	r3, #3
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	e00a      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b80      	cmp	r3, #128	; 0x80
 8002262:	d102      	bne.n	800226a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002264:	2302      	movs	r3, #2
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	e004      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b70      	cmp	r3, #112	; 0x70
 800226e:	d101      	bne.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002270:	2301      	movs	r3, #1
 8002272:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f023 0207 	bic.w	r2, r3, #7
 800227c:	4909      	ldr	r1, [pc, #36]	; (80022a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	429a      	cmp	r2, r3
 8002290:	d001      	beq.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40022000 	.word	0x40022000

080022a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022b0:	2300      	movs	r3, #0
 80022b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022b4:	2300      	movs	r3, #0
 80022b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d041      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022cc:	d02a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022d2:	d824      	bhi.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022d8:	d008      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022de:	d81e      	bhi.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e8:	d010      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022ea:	e018      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022ec:	4b86      	ldr	r3, [pc, #536]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a85      	ldr	r2, [pc, #532]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022f8:	e015      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fabb 	bl	800287c <RCCEx_PLLSAI1_Config>
 8002306:	4603      	mov	r3, r0
 8002308:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800230a:	e00c      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3320      	adds	r3, #32
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f000 fba6 	bl	8002a64 <RCCEx_PLLSAI2_Config>
 8002318:	4603      	mov	r3, r0
 800231a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800231c:	e003      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	74fb      	strb	r3, [r7, #19]
      break;
 8002322:	e000      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10b      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800232c:	4b76      	ldr	r3, [pc, #472]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800233a:	4973      	ldr	r1, [pc, #460]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002342:	e001      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d041      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002358:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800235c:	d02a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800235e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002362:	d824      	bhi.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002368:	d008      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800236a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800236e:	d81e      	bhi.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002378:	d010      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800237a:	e018      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800237c:	4b62      	ldr	r3, [pc, #392]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4a61      	ldr	r2, [pc, #388]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002386:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002388:	e015      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3304      	adds	r3, #4
 800238e:	2100      	movs	r1, #0
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fa73 	bl	800287c <RCCEx_PLLSAI1_Config>
 8002396:	4603      	mov	r3, r0
 8002398:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800239a:	e00c      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3320      	adds	r3, #32
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fb5e 	bl	8002a64 <RCCEx_PLLSAI2_Config>
 80023a8:	4603      	mov	r3, r0
 80023aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023ac:	e003      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	74fb      	strb	r3, [r7, #19]
      break;
 80023b2:	e000      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10b      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023bc:	4b52      	ldr	r3, [pc, #328]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023ca:	494f      	ldr	r1, [pc, #316]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023d2:	e001      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80a0 	beq.w	8002526 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023ea:	4b47      	ldr	r3, [pc, #284]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80023fa:	2300      	movs	r3, #0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00d      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	4b41      	ldr	r3, [pc, #260]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	4a40      	ldr	r2, [pc, #256]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240a:	6593      	str	r3, [r2, #88]	; 0x58
 800240c:	4b3e      	ldr	r3, [pc, #248]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002418:	2301      	movs	r3, #1
 800241a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800241c:	4b3b      	ldr	r3, [pc, #236]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a3a      	ldr	r2, [pc, #232]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002426:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002428:	f7fe fd90 	bl	8000f4c <HAL_GetTick>
 800242c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800242e:	e009      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002430:	f7fe fd8c 	bl	8000f4c <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d902      	bls.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	74fb      	strb	r3, [r7, #19]
        break;
 8002442:	e005      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002444:	4b31      	ldr	r3, [pc, #196]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ef      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002450:	7cfb      	ldrb	r3, [r7, #19]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d15c      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002456:	4b2c      	ldr	r3, [pc, #176]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002460:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d01f      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	429a      	cmp	r2, r3
 8002472:	d019      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800247e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002480:	4b21      	ldr	r3, [pc, #132]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002486:	4a20      	ldr	r2, [pc, #128]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002496:	4a1c      	ldr	r2, [pc, #112]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024a0:	4a19      	ldr	r2, [pc, #100]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d016      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7fe fd4b 	bl	8000f4c <HAL_GetTick>
 80024b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b8:	e00b      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ba:	f7fe fd47 	bl	8000f4c <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d902      	bls.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	74fb      	strb	r3, [r7, #19]
            break;
 80024d0:	e006      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d2:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0ec      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10c      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f6:	4904      	ldr	r1, [pc, #16]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024fe:	e009      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	74bb      	strb	r3, [r7, #18]
 8002504:	e006      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000
 800250c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002510:	7cfb      	ldrb	r3, [r7, #19]
 8002512:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002514:	7c7b      	ldrb	r3, [r7, #17]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d105      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251a:	4b9e      	ldr	r3, [pc, #632]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251e:	4a9d      	ldr	r2, [pc, #628]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002524:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002532:	4b98      	ldr	r3, [pc, #608]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002538:	f023 0203 	bic.w	r2, r3, #3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002540:	4994      	ldr	r1, [pc, #592]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002554:	4b8f      	ldr	r3, [pc, #572]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	f023 020c 	bic.w	r2, r3, #12
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002562:	498c      	ldr	r1, [pc, #560]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002576:	4b87      	ldr	r3, [pc, #540]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	4983      	ldr	r1, [pc, #524]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002598:	4b7e      	ldr	r3, [pc, #504]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	497b      	ldr	r1, [pc, #492]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025ba:	4b76      	ldr	r3, [pc, #472]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c8:	4972      	ldr	r1, [pc, #456]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025dc:	4b6d      	ldr	r3, [pc, #436]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	496a      	ldr	r1, [pc, #424]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025fe:	4b65      	ldr	r3, [pc, #404]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002604:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	4961      	ldr	r1, [pc, #388]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002620:	4b5c      	ldr	r3, [pc, #368]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002626:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262e:	4959      	ldr	r1, [pc, #356]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002642:	4b54      	ldr	r3, [pc, #336]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002648:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002650:	4950      	ldr	r1, [pc, #320]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002664:	4b4b      	ldr	r3, [pc, #300]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002672:	4948      	ldr	r1, [pc, #288]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002686:	4b43      	ldr	r3, [pc, #268]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	493f      	ldr	r1, [pc, #252]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d028      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026a8:	4b3a      	ldr	r3, [pc, #232]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026b6:	4937      	ldr	r1, [pc, #220]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c6:	d106      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c8:	4b32      	ldr	r3, [pc, #200]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4a31      	ldr	r2, [pc, #196]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d2:	60d3      	str	r3, [r2, #12]
 80026d4:	e011      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026de:	d10c      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3304      	adds	r3, #4
 80026e4:	2101      	movs	r1, #1
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f8c8 	bl	800287c <RCCEx_PLLSAI1_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d028      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002706:	4b23      	ldr	r3, [pc, #140]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	491f      	ldr	r1, [pc, #124]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002724:	d106      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002726:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	4a1a      	ldr	r2, [pc, #104]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002730:	60d3      	str	r3, [r2, #12]
 8002732:	e011      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800273c:	d10c      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3304      	adds	r3, #4
 8002742:	2101      	movs	r1, #1
 8002744:	4618      	mov	r0, r3
 8002746:	f000 f899 	bl	800287c <RCCEx_PLLSAI1_Config>
 800274a:	4603      	mov	r3, r0
 800274c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d02b      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002772:	4908      	ldr	r1, [pc, #32]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d109      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a02      	ldr	r2, [pc, #8]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
 8002790:	e014      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027a0:	d10c      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3304      	adds	r3, #4
 80027a6:	2101      	movs	r1, #1
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 f867 	bl	800287c <RCCEx_PLLSAI1_Config>
 80027ae:	4603      	mov	r3, r0
 80027b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027b2:	7cfb      	ldrb	r3, [r7, #19]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80027b8:	7cfb      	ldrb	r3, [r7, #19]
 80027ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d02f      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027c8:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027d6:	4928      	ldr	r1, [pc, #160]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027e6:	d10d      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3304      	adds	r3, #4
 80027ec:	2102      	movs	r1, #2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 f844 	bl	800287c <RCCEx_PLLSAI1_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027f8:	7cfb      	ldrb	r3, [r7, #19]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d014      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027fe:	7cfb      	ldrb	r3, [r7, #19]
 8002800:	74bb      	strb	r3, [r7, #18]
 8002802:	e011      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800280c:	d10c      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3320      	adds	r3, #32
 8002812:	2102      	movs	r1, #2
 8002814:	4618      	mov	r0, r3
 8002816:	f000 f925 	bl	8002a64 <RCCEx_PLLSAI2_Config>
 800281a:	4603      	mov	r3, r0
 800281c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800281e:	7cfb      	ldrb	r3, [r7, #19]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002842:	490d      	ldr	r1, [pc, #52]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002866:	4904      	ldr	r1, [pc, #16]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800286e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000

0800287c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800288a:	4b75      	ldr	r3, [pc, #468]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d018      	beq.n	80028c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002896:	4b72      	ldr	r3, [pc, #456]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 0203 	and.w	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d10d      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
       ||
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028ae:	4b6c      	ldr	r3, [pc, #432]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
       ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d047      	beq.n	8002952 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	e044      	b.n	8002952 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d018      	beq.n	8002902 <RCCEx_PLLSAI1_Config+0x86>
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d825      	bhi.n	8002920 <RCCEx_PLLSAI1_Config+0xa4>
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d002      	beq.n	80028de <RCCEx_PLLSAI1_Config+0x62>
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d009      	beq.n	80028f0 <RCCEx_PLLSAI1_Config+0x74>
 80028dc:	e020      	b.n	8002920 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028de:	4b60      	ldr	r3, [pc, #384]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d11d      	bne.n	8002926 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ee:	e01a      	b.n	8002926 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028f0:	4b5b      	ldr	r3, [pc, #364]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d116      	bne.n	800292a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002900:	e013      	b.n	800292a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002902:	4b57      	ldr	r3, [pc, #348]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10f      	bne.n	800292e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800290e:	4b54      	ldr	r3, [pc, #336]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800291e:	e006      	b.n	800292e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
      break;
 8002924:	e004      	b.n	8002930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002926:	bf00      	nop
 8002928:	e002      	b.n	8002930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800292a:	bf00      	nop
 800292c:	e000      	b.n	8002930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800292e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10d      	bne.n	8002952 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002936:	4b4a      	ldr	r3, [pc, #296]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6819      	ldr	r1, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	430b      	orrs	r3, r1
 800294c:	4944      	ldr	r1, [pc, #272]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d17d      	bne.n	8002a54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002958:	4b41      	ldr	r3, [pc, #260]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a40      	ldr	r2, [pc, #256]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002964:	f7fe faf2 	bl	8000f4c <HAL_GetTick>
 8002968:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800296a:	e009      	b.n	8002980 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800296c:	f7fe faee 	bl	8000f4c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d902      	bls.n	8002980 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	73fb      	strb	r3, [r7, #15]
        break;
 800297e:	e005      	b.n	800298c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002980:	4b37      	ldr	r3, [pc, #220]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ef      	bne.n	800296c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d160      	bne.n	8002a54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d111      	bne.n	80029bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002998:	4b31      	ldr	r3, [pc, #196]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6892      	ldr	r2, [r2, #8]
 80029a8:	0211      	lsls	r1, r2, #8
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68d2      	ldr	r2, [r2, #12]
 80029ae:	0912      	lsrs	r2, r2, #4
 80029b0:	0452      	lsls	r2, r2, #17
 80029b2:	430a      	orrs	r2, r1
 80029b4:	492a      	ldr	r1, [pc, #168]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	610b      	str	r3, [r1, #16]
 80029ba:	e027      	b.n	8002a0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d112      	bne.n	80029e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029c2:	4b27      	ldr	r3, [pc, #156]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6892      	ldr	r2, [r2, #8]
 80029d2:	0211      	lsls	r1, r2, #8
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6912      	ldr	r2, [r2, #16]
 80029d8:	0852      	lsrs	r2, r2, #1
 80029da:	3a01      	subs	r2, #1
 80029dc:	0552      	lsls	r2, r2, #21
 80029de:	430a      	orrs	r2, r1
 80029e0:	491f      	ldr	r1, [pc, #124]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	610b      	str	r3, [r1, #16]
 80029e6:	e011      	b.n	8002a0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6892      	ldr	r2, [r2, #8]
 80029f8:	0211      	lsls	r1, r2, #8
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6952      	ldr	r2, [r2, #20]
 80029fe:	0852      	lsrs	r2, r2, #1
 8002a00:	3a01      	subs	r2, #1
 8002a02:	0652      	lsls	r2, r2, #25
 8002a04:	430a      	orrs	r2, r1
 8002a06:	4916      	ldr	r1, [pc, #88]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a0c:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7fe fa98 	bl	8000f4c <HAL_GetTick>
 8002a1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a1e:	e009      	b.n	8002a34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a20:	f7fe fa94 	bl	8000f4c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d902      	bls.n	8002a34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	73fb      	strb	r3, [r7, #15]
          break;
 8002a32:	e005      	b.n	8002a40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a34:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0ef      	beq.n	8002a20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	4904      	ldr	r1, [pc, #16]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000

08002a64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a72:	4b6a      	ldr	r3, [pc, #424]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d018      	beq.n	8002ab0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a7e:	4b67      	ldr	r3, [pc, #412]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0203 	and.w	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d10d      	bne.n	8002aaa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
       ||
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a96:	4b61      	ldr	r3, [pc, #388]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
       ||
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d047      	beq.n	8002b3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
 8002aae:	e044      	b.n	8002b3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d018      	beq.n	8002aea <RCCEx_PLLSAI2_Config+0x86>
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d825      	bhi.n	8002b08 <RCCEx_PLLSAI2_Config+0xa4>
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d002      	beq.n	8002ac6 <RCCEx_PLLSAI2_Config+0x62>
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d009      	beq.n	8002ad8 <RCCEx_PLLSAI2_Config+0x74>
 8002ac4:	e020      	b.n	8002b08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ac6:	4b55      	ldr	r3, [pc, #340]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d11d      	bne.n	8002b0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad6:	e01a      	b.n	8002b0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ad8:	4b50      	ldr	r3, [pc, #320]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d116      	bne.n	8002b12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae8:	e013      	b.n	8002b12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002aea:	4b4c      	ldr	r3, [pc, #304]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10f      	bne.n	8002b16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002af6:	4b49      	ldr	r3, [pc, #292]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d109      	bne.n	8002b16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b06:	e006      	b.n	8002b16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b0c:	e004      	b.n	8002b18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b0e:	bf00      	nop
 8002b10:	e002      	b.n	8002b18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b12:	bf00      	nop
 8002b14:	e000      	b.n	8002b18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b16:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10d      	bne.n	8002b3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b1e:	4b3f      	ldr	r3, [pc, #252]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6819      	ldr	r1, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	430b      	orrs	r3, r1
 8002b34:	4939      	ldr	r1, [pc, #228]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d167      	bne.n	8002c10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b40:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a35      	ldr	r2, [pc, #212]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b4c:	f7fe f9fe 	bl	8000f4c <HAL_GetTick>
 8002b50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b52:	e009      	b.n	8002b68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b54:	f7fe f9fa 	bl	8000f4c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d902      	bls.n	8002b68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	73fb      	strb	r3, [r7, #15]
        break;
 8002b66:	e005      	b.n	8002b74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b68:	4b2c      	ldr	r3, [pc, #176]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1ef      	bne.n	8002b54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d14a      	bne.n	8002c10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d111      	bne.n	8002ba4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b80:	4b26      	ldr	r3, [pc, #152]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6892      	ldr	r2, [r2, #8]
 8002b90:	0211      	lsls	r1, r2, #8
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68d2      	ldr	r2, [r2, #12]
 8002b96:	0912      	lsrs	r2, r2, #4
 8002b98:	0452      	lsls	r2, r2, #17
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	491f      	ldr	r1, [pc, #124]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	614b      	str	r3, [r1, #20]
 8002ba2:	e011      	b.n	8002bc8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6892      	ldr	r2, [r2, #8]
 8002bb4:	0211      	lsls	r1, r2, #8
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6912      	ldr	r2, [r2, #16]
 8002bba:	0852      	lsrs	r2, r2, #1
 8002bbc:	3a01      	subs	r2, #1
 8002bbe:	0652      	lsls	r2, r2, #25
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	4916      	ldr	r1, [pc, #88]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bc8:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a13      	ldr	r2, [pc, #76]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd4:	f7fe f9ba 	bl	8000f4c <HAL_GetTick>
 8002bd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bda:	e009      	b.n	8002bf0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bdc:	f7fe f9b6 	bl	8000f4c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d902      	bls.n	8002bf0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	73fb      	strb	r3, [r7, #15]
          break;
 8002bee:	e005      	b.n	8002bfc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ef      	beq.n	8002bdc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	4904      	ldr	r1, [pc, #16]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000

08002c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e040      	b.n	8002cb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fd fdce 	bl	80007e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2224      	movs	r2, #36	; 0x24
 8002c4c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0201 	bic.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fb26 	bl	80032b0 <UART_SetConfig>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e022      	b.n	8002cb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fda4 	bl	80037c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 fe2b 	bl	8003908 <UART_CheckIdleState>
 8002cb2:	4603      	mov	r3, r0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08a      	sub	sp, #40	; 0x28
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	f040 8082 	bne.w	8002dda <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <HAL_UART_Transmit+0x26>
 8002cdc:	88fb      	ldrh	r3, [r7, #6]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e07a      	b.n	8002ddc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_UART_Transmit+0x38>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e073      	b.n	8002ddc <HAL_UART_Transmit+0x120>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2221      	movs	r2, #33	; 0x21
 8002d08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d0a:	f7fe f91f 	bl	8000f4c <HAL_GetTick>
 8002d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	88fa      	ldrh	r2, [r7, #6]
 8002d14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	88fa      	ldrh	r2, [r7, #6]
 8002d1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d28:	d108      	bne.n	8002d3c <HAL_UART_Transmit+0x80>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d104      	bne.n	8002d3c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	e003      	b.n	8002d44 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002d4c:	e02d      	b.n	8002daa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2200      	movs	r2, #0
 8002d56:	2180      	movs	r1, #128	; 0x80
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fe1e 	bl	800399a <UART_WaitOnFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e039      	b.n	8002ddc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10b      	bne.n	8002d86 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	881a      	ldrh	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d7a:	b292      	uxth	r2, r2
 8002d7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	3302      	adds	r3, #2
 8002d82:	61bb      	str	r3, [r7, #24]
 8002d84:	e008      	b.n	8002d98 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	b292      	uxth	r2, r2
 8002d90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3301      	adds	r3, #1
 8002d96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1cb      	bne.n	8002d4e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2140      	movs	r1, #64	; 0x40
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fdea 	bl	800399a <UART_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e005      	b.n	8002ddc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e000      	b.n	8002ddc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002dda:	2302      	movs	r3, #2
  }
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3720      	adds	r7, #32
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	4613      	mov	r3, r2
 8002df0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	d131      	bne.n	8002e5e <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <HAL_UART_Receive_IT+0x22>
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e02a      	b.n	8002e60 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_UART_Receive_IT+0x34>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e023      	b.n	8002e60 <HAL_UART_Receive_IT+0x7c>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a0f      	ldr	r2, [pc, #60]	; (8002e68 <HAL_UART_Receive_IT+0x84>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00e      	beq.n	8002e4e <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d007      	beq.n	8002e4e <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002e4c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	461a      	mov	r2, r3
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 fe1d 	bl	8003a94 <UART_Start_Receive_IT>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	e000      	b.n	8002e60 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8002e5e:	2302      	movs	r3, #2
  }
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40008000 	.word	0x40008000

08002e6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e92:	4013      	ands	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d113      	bne.n	8002ec4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00e      	beq.n	8002ec4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d009      	beq.n	8002ec4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 81ce 	beq.w	8003256 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
      }
      return;
 8002ec2:	e1c8      	b.n	8003256 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 80e3 	beq.w	8003092 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d105      	bne.n	8002ee2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4ba6      	ldr	r3, [pc, #664]	; (8003174 <HAL_UART_IRQHandler+0x308>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80d8 	beq.w	8003092 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d010      	beq.n	8002f0e <HAL_UART_IRQHandler+0xa2>
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00b      	beq.n	8002f0e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2201      	movs	r2, #1
 8002efc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f04:	f043 0201 	orr.w	r2, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d010      	beq.n	8002f3a <HAL_UART_IRQHandler+0xce>
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00b      	beq.n	8002f3a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2202      	movs	r2, #2
 8002f28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f30:	f043 0204 	orr.w	r2, r3, #4
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d010      	beq.n	8002f66 <HAL_UART_IRQHandler+0xfa>
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2204      	movs	r2, #4
 8002f54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5c:	f043 0202 	orr.w	r2, r3, #2
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d015      	beq.n	8002f9c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d104      	bne.n	8002f84 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00b      	beq.n	8002f9c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2208      	movs	r2, #8
 8002f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f92:	f043 0208 	orr.w	r2, r3, #8
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d011      	beq.n	8002fca <HAL_UART_IRQHandler+0x15e>
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00c      	beq.n	8002fca <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc0:	f043 0220 	orr.w	r2, r3, #32
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 8142 	beq.w	800325a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00c      	beq.n	8002ffa <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003000:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300c:	2b40      	cmp	r3, #64	; 0x40
 800300e:	d004      	beq.n	800301a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003016:	2b00      	cmp	r3, #0
 8003018:	d031      	beq.n	800307e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fdc2 	bl	8003ba4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	d123      	bne.n	8003076 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800303c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003042:	2b00      	cmp	r3, #0
 8003044:	d013      	beq.n	800306e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	4a4b      	ldr	r2, [pc, #300]	; (8003178 <HAL_UART_IRQHandler+0x30c>)
 800304c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe f8d5 	bl	8001202 <HAL_DMA_Abort_IT>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d017      	beq.n	800308e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003068:	4610      	mov	r0, r2
 800306a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800306c:	e00f      	b.n	800308e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f908 	bl	8003284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003074:	e00b      	b.n	800308e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f904 	bl	8003284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800307c:	e007      	b.n	800308e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f900 	bl	8003284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800308c:	e0e5      	b.n	800325a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800308e:	bf00      	nop
    return;
 8003090:	e0e3      	b.n	800325a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003096:	2b01      	cmp	r3, #1
 8003098:	f040 80a9 	bne.w	80031ee <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 80a3 	beq.w	80031ee <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	f003 0310 	and.w	r3, r3, #16
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 809d 	beq.w	80031ee <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2210      	movs	r2, #16
 80030ba:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c6:	2b40      	cmp	r3, #64	; 0x40
 80030c8:	d158      	bne.n	800317c <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80030d4:	893b      	ldrh	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 80c1 	beq.w	800325e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80030e2:	893a      	ldrh	r2, [r7, #8]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	f080 80ba 	bcs.w	800325e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	893a      	ldrh	r2, [r7, #8]
 80030ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d12a      	bne.n	8003158 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003110:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0201 	bic.w	r2, r2, #1
 8003120:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003130:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2220      	movs	r2, #32
 8003136:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0210 	bic.w	r2, r2, #16
 800314c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe f817 	bl	8001186 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003164:	b29b      	uxth	r3, r3
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	b29b      	uxth	r3, r3
 800316a:	4619      	mov	r1, r3
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f893 	bl	8003298 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003172:	e074      	b.n	800325e <HAL_UART_IRQHandler+0x3f2>
 8003174:	04000120 	.word	0x04000120
 8003178:	08003c03 	.word	0x08003c03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003188:	b29b      	uxth	r3, r3
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d063      	beq.n	8003262 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800319a:	897b      	ldrh	r3, [r7, #10]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d060      	beq.n	8003262 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031ae:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0210 	bic.w	r2, r2, #16
 80031e0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031e2:	897b      	ldrh	r3, [r7, #10]
 80031e4:	4619      	mov	r1, r3
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f856 	bl	8003298 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80031ec:	e039      	b.n	8003262 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00d      	beq.n	8003214 <HAL_UART_IRQHandler+0x3a8>
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800320a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fdff 	bl	8003e10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003212:	e029      	b.n	8003268 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00d      	beq.n	800323a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01a      	beq.n	8003266 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4798      	blx	r3
    }
    return;
 8003238:	e015      	b.n	8003266 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003240:	2b00      	cmp	r3, #0
 8003242:	d011      	beq.n	8003268 <HAL_UART_IRQHandler+0x3fc>
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00c      	beq.n	8003268 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fced 	bl	8003c2e <UART_EndTransmit_IT>
    return;
 8003254:	e008      	b.n	8003268 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003256:	bf00      	nop
 8003258:	e006      	b.n	8003268 <HAL_UART_IRQHandler+0x3fc>
    return;
 800325a:	bf00      	nop
 800325c:	e004      	b.n	8003268 <HAL_UART_IRQHandler+0x3fc>
      return;
 800325e:	bf00      	nop
 8003260:	e002      	b.n	8003268 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003262:	bf00      	nop
 8003264:	e000      	b.n	8003268 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003266:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003268:	3720      	adds	r7, #32
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop

08003270 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032b0:	b5b0      	push	{r4, r5, r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4bad      	ldr	r3, [pc, #692]	; (8003590 <UART_SetConfig+0x2e0>)
 80032dc:	4013      	ands	r3, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	69f9      	ldr	r1, [r7, #28]
 80032e4:	430b      	orrs	r3, r1
 80032e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4aa2      	ldr	r2, [pc, #648]	; (8003594 <UART_SetConfig+0x2e4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d004      	beq.n	8003318 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	69fa      	ldr	r2, [r7, #28]
 8003314:	4313      	orrs	r3, r2
 8003316:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	430a      	orrs	r2, r1
 800332a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a99      	ldr	r2, [pc, #612]	; (8003598 <UART_SetConfig+0x2e8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d121      	bne.n	800337a <UART_SetConfig+0xca>
 8003336:	4b99      	ldr	r3, [pc, #612]	; (800359c <UART_SetConfig+0x2ec>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333c:	f003 0303 	and.w	r3, r3, #3
 8003340:	2b03      	cmp	r3, #3
 8003342:	d817      	bhi.n	8003374 <UART_SetConfig+0xc4>
 8003344:	a201      	add	r2, pc, #4	; (adr r2, 800334c <UART_SetConfig+0x9c>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	0800335d 	.word	0x0800335d
 8003350:	08003369 	.word	0x08003369
 8003354:	08003363 	.word	0x08003363
 8003358:	0800336f 	.word	0x0800336f
 800335c:	2301      	movs	r3, #1
 800335e:	76fb      	strb	r3, [r7, #27]
 8003360:	e0e7      	b.n	8003532 <UART_SetConfig+0x282>
 8003362:	2302      	movs	r3, #2
 8003364:	76fb      	strb	r3, [r7, #27]
 8003366:	e0e4      	b.n	8003532 <UART_SetConfig+0x282>
 8003368:	2304      	movs	r3, #4
 800336a:	76fb      	strb	r3, [r7, #27]
 800336c:	e0e1      	b.n	8003532 <UART_SetConfig+0x282>
 800336e:	2308      	movs	r3, #8
 8003370:	76fb      	strb	r3, [r7, #27]
 8003372:	e0de      	b.n	8003532 <UART_SetConfig+0x282>
 8003374:	2310      	movs	r3, #16
 8003376:	76fb      	strb	r3, [r7, #27]
 8003378:	e0db      	b.n	8003532 <UART_SetConfig+0x282>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a88      	ldr	r2, [pc, #544]	; (80035a0 <UART_SetConfig+0x2f0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d132      	bne.n	80033ea <UART_SetConfig+0x13a>
 8003384:	4b85      	ldr	r3, [pc, #532]	; (800359c <UART_SetConfig+0x2ec>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b0c      	cmp	r3, #12
 8003390:	d828      	bhi.n	80033e4 <UART_SetConfig+0x134>
 8003392:	a201      	add	r2, pc, #4	; (adr r2, 8003398 <UART_SetConfig+0xe8>)
 8003394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003398:	080033cd 	.word	0x080033cd
 800339c:	080033e5 	.word	0x080033e5
 80033a0:	080033e5 	.word	0x080033e5
 80033a4:	080033e5 	.word	0x080033e5
 80033a8:	080033d9 	.word	0x080033d9
 80033ac:	080033e5 	.word	0x080033e5
 80033b0:	080033e5 	.word	0x080033e5
 80033b4:	080033e5 	.word	0x080033e5
 80033b8:	080033d3 	.word	0x080033d3
 80033bc:	080033e5 	.word	0x080033e5
 80033c0:	080033e5 	.word	0x080033e5
 80033c4:	080033e5 	.word	0x080033e5
 80033c8:	080033df 	.word	0x080033df
 80033cc:	2300      	movs	r3, #0
 80033ce:	76fb      	strb	r3, [r7, #27]
 80033d0:	e0af      	b.n	8003532 <UART_SetConfig+0x282>
 80033d2:	2302      	movs	r3, #2
 80033d4:	76fb      	strb	r3, [r7, #27]
 80033d6:	e0ac      	b.n	8003532 <UART_SetConfig+0x282>
 80033d8:	2304      	movs	r3, #4
 80033da:	76fb      	strb	r3, [r7, #27]
 80033dc:	e0a9      	b.n	8003532 <UART_SetConfig+0x282>
 80033de:	2308      	movs	r3, #8
 80033e0:	76fb      	strb	r3, [r7, #27]
 80033e2:	e0a6      	b.n	8003532 <UART_SetConfig+0x282>
 80033e4:	2310      	movs	r3, #16
 80033e6:	76fb      	strb	r3, [r7, #27]
 80033e8:	e0a3      	b.n	8003532 <UART_SetConfig+0x282>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a6d      	ldr	r2, [pc, #436]	; (80035a4 <UART_SetConfig+0x2f4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d120      	bne.n	8003436 <UART_SetConfig+0x186>
 80033f4:	4b69      	ldr	r3, [pc, #420]	; (800359c <UART_SetConfig+0x2ec>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80033fe:	2b30      	cmp	r3, #48	; 0x30
 8003400:	d013      	beq.n	800342a <UART_SetConfig+0x17a>
 8003402:	2b30      	cmp	r3, #48	; 0x30
 8003404:	d814      	bhi.n	8003430 <UART_SetConfig+0x180>
 8003406:	2b20      	cmp	r3, #32
 8003408:	d009      	beq.n	800341e <UART_SetConfig+0x16e>
 800340a:	2b20      	cmp	r3, #32
 800340c:	d810      	bhi.n	8003430 <UART_SetConfig+0x180>
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <UART_SetConfig+0x168>
 8003412:	2b10      	cmp	r3, #16
 8003414:	d006      	beq.n	8003424 <UART_SetConfig+0x174>
 8003416:	e00b      	b.n	8003430 <UART_SetConfig+0x180>
 8003418:	2300      	movs	r3, #0
 800341a:	76fb      	strb	r3, [r7, #27]
 800341c:	e089      	b.n	8003532 <UART_SetConfig+0x282>
 800341e:	2302      	movs	r3, #2
 8003420:	76fb      	strb	r3, [r7, #27]
 8003422:	e086      	b.n	8003532 <UART_SetConfig+0x282>
 8003424:	2304      	movs	r3, #4
 8003426:	76fb      	strb	r3, [r7, #27]
 8003428:	e083      	b.n	8003532 <UART_SetConfig+0x282>
 800342a:	2308      	movs	r3, #8
 800342c:	76fb      	strb	r3, [r7, #27]
 800342e:	e080      	b.n	8003532 <UART_SetConfig+0x282>
 8003430:	2310      	movs	r3, #16
 8003432:	76fb      	strb	r3, [r7, #27]
 8003434:	e07d      	b.n	8003532 <UART_SetConfig+0x282>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a5b      	ldr	r2, [pc, #364]	; (80035a8 <UART_SetConfig+0x2f8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d120      	bne.n	8003482 <UART_SetConfig+0x1d2>
 8003440:	4b56      	ldr	r3, [pc, #344]	; (800359c <UART_SetConfig+0x2ec>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800344a:	2bc0      	cmp	r3, #192	; 0xc0
 800344c:	d013      	beq.n	8003476 <UART_SetConfig+0x1c6>
 800344e:	2bc0      	cmp	r3, #192	; 0xc0
 8003450:	d814      	bhi.n	800347c <UART_SetConfig+0x1cc>
 8003452:	2b80      	cmp	r3, #128	; 0x80
 8003454:	d009      	beq.n	800346a <UART_SetConfig+0x1ba>
 8003456:	2b80      	cmp	r3, #128	; 0x80
 8003458:	d810      	bhi.n	800347c <UART_SetConfig+0x1cc>
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <UART_SetConfig+0x1b4>
 800345e:	2b40      	cmp	r3, #64	; 0x40
 8003460:	d006      	beq.n	8003470 <UART_SetConfig+0x1c0>
 8003462:	e00b      	b.n	800347c <UART_SetConfig+0x1cc>
 8003464:	2300      	movs	r3, #0
 8003466:	76fb      	strb	r3, [r7, #27]
 8003468:	e063      	b.n	8003532 <UART_SetConfig+0x282>
 800346a:	2302      	movs	r3, #2
 800346c:	76fb      	strb	r3, [r7, #27]
 800346e:	e060      	b.n	8003532 <UART_SetConfig+0x282>
 8003470:	2304      	movs	r3, #4
 8003472:	76fb      	strb	r3, [r7, #27]
 8003474:	e05d      	b.n	8003532 <UART_SetConfig+0x282>
 8003476:	2308      	movs	r3, #8
 8003478:	76fb      	strb	r3, [r7, #27]
 800347a:	e05a      	b.n	8003532 <UART_SetConfig+0x282>
 800347c:	2310      	movs	r3, #16
 800347e:	76fb      	strb	r3, [r7, #27]
 8003480:	e057      	b.n	8003532 <UART_SetConfig+0x282>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a49      	ldr	r2, [pc, #292]	; (80035ac <UART_SetConfig+0x2fc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d125      	bne.n	80034d8 <UART_SetConfig+0x228>
 800348c:	4b43      	ldr	r3, [pc, #268]	; (800359c <UART_SetConfig+0x2ec>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800349a:	d017      	beq.n	80034cc <UART_SetConfig+0x21c>
 800349c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034a0:	d817      	bhi.n	80034d2 <UART_SetConfig+0x222>
 80034a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a6:	d00b      	beq.n	80034c0 <UART_SetConfig+0x210>
 80034a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ac:	d811      	bhi.n	80034d2 <UART_SetConfig+0x222>
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <UART_SetConfig+0x20a>
 80034b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b6:	d006      	beq.n	80034c6 <UART_SetConfig+0x216>
 80034b8:	e00b      	b.n	80034d2 <UART_SetConfig+0x222>
 80034ba:	2300      	movs	r3, #0
 80034bc:	76fb      	strb	r3, [r7, #27]
 80034be:	e038      	b.n	8003532 <UART_SetConfig+0x282>
 80034c0:	2302      	movs	r3, #2
 80034c2:	76fb      	strb	r3, [r7, #27]
 80034c4:	e035      	b.n	8003532 <UART_SetConfig+0x282>
 80034c6:	2304      	movs	r3, #4
 80034c8:	76fb      	strb	r3, [r7, #27]
 80034ca:	e032      	b.n	8003532 <UART_SetConfig+0x282>
 80034cc:	2308      	movs	r3, #8
 80034ce:	76fb      	strb	r3, [r7, #27]
 80034d0:	e02f      	b.n	8003532 <UART_SetConfig+0x282>
 80034d2:	2310      	movs	r3, #16
 80034d4:	76fb      	strb	r3, [r7, #27]
 80034d6:	e02c      	b.n	8003532 <UART_SetConfig+0x282>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a2d      	ldr	r2, [pc, #180]	; (8003594 <UART_SetConfig+0x2e4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d125      	bne.n	800352e <UART_SetConfig+0x27e>
 80034e2:	4b2e      	ldr	r3, [pc, #184]	; (800359c <UART_SetConfig+0x2ec>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034f0:	d017      	beq.n	8003522 <UART_SetConfig+0x272>
 80034f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034f6:	d817      	bhi.n	8003528 <UART_SetConfig+0x278>
 80034f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034fc:	d00b      	beq.n	8003516 <UART_SetConfig+0x266>
 80034fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003502:	d811      	bhi.n	8003528 <UART_SetConfig+0x278>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <UART_SetConfig+0x260>
 8003508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800350c:	d006      	beq.n	800351c <UART_SetConfig+0x26c>
 800350e:	e00b      	b.n	8003528 <UART_SetConfig+0x278>
 8003510:	2300      	movs	r3, #0
 8003512:	76fb      	strb	r3, [r7, #27]
 8003514:	e00d      	b.n	8003532 <UART_SetConfig+0x282>
 8003516:	2302      	movs	r3, #2
 8003518:	76fb      	strb	r3, [r7, #27]
 800351a:	e00a      	b.n	8003532 <UART_SetConfig+0x282>
 800351c:	2304      	movs	r3, #4
 800351e:	76fb      	strb	r3, [r7, #27]
 8003520:	e007      	b.n	8003532 <UART_SetConfig+0x282>
 8003522:	2308      	movs	r3, #8
 8003524:	76fb      	strb	r3, [r7, #27]
 8003526:	e004      	b.n	8003532 <UART_SetConfig+0x282>
 8003528:	2310      	movs	r3, #16
 800352a:	76fb      	strb	r3, [r7, #27]
 800352c:	e001      	b.n	8003532 <UART_SetConfig+0x282>
 800352e:	2310      	movs	r3, #16
 8003530:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a17      	ldr	r2, [pc, #92]	; (8003594 <UART_SetConfig+0x2e4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	f040 8087 	bne.w	800364c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800353e:	7efb      	ldrb	r3, [r7, #27]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d837      	bhi.n	80035b4 <UART_SetConfig+0x304>
 8003544:	a201      	add	r2, pc, #4	; (adr r2, 800354c <UART_SetConfig+0x29c>)
 8003546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354a:	bf00      	nop
 800354c:	08003571 	.word	0x08003571
 8003550:	080035b5 	.word	0x080035b5
 8003554:	08003579 	.word	0x08003579
 8003558:	080035b5 	.word	0x080035b5
 800355c:	0800357f 	.word	0x0800357f
 8003560:	080035b5 	.word	0x080035b5
 8003564:	080035b5 	.word	0x080035b5
 8003568:	080035b5 	.word	0x080035b5
 800356c:	08003587 	.word	0x08003587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003570:	f7fe fe0e 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8003574:	6178      	str	r0, [r7, #20]
        break;
 8003576:	e022      	b.n	80035be <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003578:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <UART_SetConfig+0x300>)
 800357a:	617b      	str	r3, [r7, #20]
        break;
 800357c:	e01f      	b.n	80035be <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800357e:	f7fe fd6f 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8003582:	6178      	str	r0, [r7, #20]
        break;
 8003584:	e01b      	b.n	80035be <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800358a:	617b      	str	r3, [r7, #20]
        break;
 800358c:	e017      	b.n	80035be <UART_SetConfig+0x30e>
 800358e:	bf00      	nop
 8003590:	efff69f3 	.word	0xefff69f3
 8003594:	40008000 	.word	0x40008000
 8003598:	40013800 	.word	0x40013800
 800359c:	40021000 	.word	0x40021000
 80035a0:	40004400 	.word	0x40004400
 80035a4:	40004800 	.word	0x40004800
 80035a8:	40004c00 	.word	0x40004c00
 80035ac:	40005000 	.word	0x40005000
 80035b0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	76bb      	strb	r3, [r7, #26]
        break;
 80035bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 80f1 	beq.w	80037a8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	4413      	add	r3, r2
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d305      	bcc.n	80035e2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d902      	bls.n	80035e8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	76bb      	strb	r3, [r7, #26]
 80035e6:	e0df      	b.n	80037a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f04f 0100 	mov.w	r1, #0
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	020b      	lsls	r3, r1, #8
 80035fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80035fe:	0202      	lsls	r2, r0, #8
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	6849      	ldr	r1, [r1, #4]
 8003604:	0849      	lsrs	r1, r1, #1
 8003606:	4608      	mov	r0, r1
 8003608:	f04f 0100 	mov.w	r1, #0
 800360c:	1814      	adds	r4, r2, r0
 800360e:	eb43 0501 	adc.w	r5, r3, r1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	461a      	mov	r2, r3
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	4620      	mov	r0, r4
 800361e:	4629      	mov	r1, r5
 8003620:	f7fc fe26 	bl	8000270 <__aeabi_uldivmod>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4613      	mov	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003632:	d308      	bcc.n	8003646 <UART_SetConfig+0x396>
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800363a:	d204      	bcs.n	8003646 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	60da      	str	r2, [r3, #12]
 8003644:	e0b0      	b.n	80037a8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	76bb      	strb	r3, [r7, #26]
 800364a:	e0ad      	b.n	80037a8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003654:	d15c      	bne.n	8003710 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003656:	7efb      	ldrb	r3, [r7, #27]
 8003658:	2b08      	cmp	r3, #8
 800365a:	d828      	bhi.n	80036ae <UART_SetConfig+0x3fe>
 800365c:	a201      	add	r2, pc, #4	; (adr r2, 8003664 <UART_SetConfig+0x3b4>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003689 	.word	0x08003689
 8003668:	08003691 	.word	0x08003691
 800366c:	08003699 	.word	0x08003699
 8003670:	080036af 	.word	0x080036af
 8003674:	0800369f 	.word	0x0800369f
 8003678:	080036af 	.word	0x080036af
 800367c:	080036af 	.word	0x080036af
 8003680:	080036af 	.word	0x080036af
 8003684:	080036a7 	.word	0x080036a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003688:	f7fe fd82 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 800368c:	6178      	str	r0, [r7, #20]
        break;
 800368e:	e013      	b.n	80036b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003690:	f7fe fd94 	bl	80021bc <HAL_RCC_GetPCLK2Freq>
 8003694:	6178      	str	r0, [r7, #20]
        break;
 8003696:	e00f      	b.n	80036b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003698:	4b49      	ldr	r3, [pc, #292]	; (80037c0 <UART_SetConfig+0x510>)
 800369a:	617b      	str	r3, [r7, #20]
        break;
 800369c:	e00c      	b.n	80036b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800369e:	f7fe fcdf 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 80036a2:	6178      	str	r0, [r7, #20]
        break;
 80036a4:	e008      	b.n	80036b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036aa:	617b      	str	r3, [r7, #20]
        break;
 80036ac:	e004      	b.n	80036b8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	76bb      	strb	r3, [r7, #26]
        break;
 80036b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d074      	beq.n	80037a8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	005a      	lsls	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	085b      	lsrs	r3, r3, #1
 80036c8:	441a      	add	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b0f      	cmp	r3, #15
 80036da:	d916      	bls.n	800370a <UART_SetConfig+0x45a>
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e2:	d212      	bcs.n	800370a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	f023 030f 	bic.w	r3, r3, #15
 80036ec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	89fb      	ldrh	r3, [r7, #14]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	89fa      	ldrh	r2, [r7, #14]
 8003706:	60da      	str	r2, [r3, #12]
 8003708:	e04e      	b.n	80037a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	76bb      	strb	r3, [r7, #26]
 800370e:	e04b      	b.n	80037a8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003710:	7efb      	ldrb	r3, [r7, #27]
 8003712:	2b08      	cmp	r3, #8
 8003714:	d827      	bhi.n	8003766 <UART_SetConfig+0x4b6>
 8003716:	a201      	add	r2, pc, #4	; (adr r2, 800371c <UART_SetConfig+0x46c>)
 8003718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371c:	08003741 	.word	0x08003741
 8003720:	08003749 	.word	0x08003749
 8003724:	08003751 	.word	0x08003751
 8003728:	08003767 	.word	0x08003767
 800372c:	08003757 	.word	0x08003757
 8003730:	08003767 	.word	0x08003767
 8003734:	08003767 	.word	0x08003767
 8003738:	08003767 	.word	0x08003767
 800373c:	0800375f 	.word	0x0800375f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003740:	f7fe fd26 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8003744:	6178      	str	r0, [r7, #20]
        break;
 8003746:	e013      	b.n	8003770 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003748:	f7fe fd38 	bl	80021bc <HAL_RCC_GetPCLK2Freq>
 800374c:	6178      	str	r0, [r7, #20]
        break;
 800374e:	e00f      	b.n	8003770 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003750:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <UART_SetConfig+0x510>)
 8003752:	617b      	str	r3, [r7, #20]
        break;
 8003754:	e00c      	b.n	8003770 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003756:	f7fe fc83 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 800375a:	6178      	str	r0, [r7, #20]
        break;
 800375c:	e008      	b.n	8003770 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800375e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003762:	617b      	str	r3, [r7, #20]
        break;
 8003764:	e004      	b.n	8003770 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	76bb      	strb	r3, [r7, #26]
        break;
 800376e:	bf00      	nop
    }

    if (pclk != 0U)
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d018      	beq.n	80037a8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	085a      	lsrs	r2, r3, #1
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	441a      	add	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	b29b      	uxth	r3, r3
 800378a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	2b0f      	cmp	r3, #15
 8003790:	d908      	bls.n	80037a4 <UART_SetConfig+0x4f4>
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003798:	d204      	bcs.n	80037a4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	60da      	str	r2, [r3, #12]
 80037a2:	e001      	b.n	80037a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80037b4:	7ebb      	ldrb	r3, [r7, #26]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3720      	adds	r7, #32
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bdb0      	pop	{r4, r5, r7, pc}
 80037be:	bf00      	nop
 80037c0:	00f42400 	.word	0x00f42400

080037c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01a      	beq.n	80038da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038c2:	d10a      	bne.n	80038da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	605a      	str	r2, [r3, #4]
  }
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af02      	add	r7, sp, #8
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003918:	f7fd fb18 	bl	8000f4c <HAL_GetTick>
 800391c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b08      	cmp	r3, #8
 800392a:	d10e      	bne.n	800394a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800392c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f82d 	bl	800399a <UART_WaitOnFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e023      	b.n	8003992 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b04      	cmp	r3, #4
 8003956:	d10e      	bne.n	8003976 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f817 	bl	800399a <UART_WaitOnFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e00d      	b.n	8003992 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	603b      	str	r3, [r7, #0]
 80039a6:	4613      	mov	r3, r2
 80039a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039aa:	e05e      	b.n	8003a6a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b2:	d05a      	beq.n	8003a6a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b4:	f7fd faca 	bl	8000f4c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d302      	bcc.n	80039ca <UART_WaitOnFlagUntilTimeout+0x30>
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d11b      	bne.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039d8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0201 	bic.w	r2, r2, #1
 80039e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2220      	movs	r2, #32
 80039ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e043      	b.n	8003a8a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d02c      	beq.n	8003a6a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a1e:	d124      	bne.n	8003a6a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a28:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a38:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0201 	bic.w	r2, r2, #1
 8003a48:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2220      	movs	r2, #32
 8003a54:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e00f      	b.n	8003a8a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69da      	ldr	r2, [r3, #28]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	4013      	ands	r3, r2
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	bf0c      	ite	eq
 8003a7a:	2301      	moveq	r3, #1
 8003a7c:	2300      	movne	r3, #0
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	461a      	mov	r2, r3
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d091      	beq.n	80039ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	88fa      	ldrh	r2, [r7, #6]
 8003aac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	88fa      	ldrh	r2, [r7, #6]
 8003ab4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac6:	d10e      	bne.n	8003ae6 <UART_Start_Receive_IT+0x52>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <UART_Start_Receive_IT+0x48>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003ad6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ada:	e02d      	b.n	8003b38 <UART_Start_Receive_IT+0xa4>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	22ff      	movs	r2, #255	; 0xff
 8003ae0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ae4:	e028      	b.n	8003b38 <UART_Start_Receive_IT+0xa4>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10d      	bne.n	8003b0a <UART_Start_Receive_IT+0x76>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d104      	bne.n	8003b00 <UART_Start_Receive_IT+0x6c>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	22ff      	movs	r2, #255	; 0xff
 8003afa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003afe:	e01b      	b.n	8003b38 <UART_Start_Receive_IT+0xa4>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	227f      	movs	r2, #127	; 0x7f
 8003b04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b08:	e016      	b.n	8003b38 <UART_Start_Receive_IT+0xa4>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b12:	d10d      	bne.n	8003b30 <UART_Start_Receive_IT+0x9c>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d104      	bne.n	8003b26 <UART_Start_Receive_IT+0x92>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	227f      	movs	r2, #127	; 0x7f
 8003b20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b24:	e008      	b.n	8003b38 <UART_Start_Receive_IT+0xa4>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	223f      	movs	r2, #63	; 0x3f
 8003b2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b2e:	e003      	b.n	8003b38 <UART_Start_Receive_IT+0xa4>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2222      	movs	r2, #34	; 0x22
 8003b44:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0201 	orr.w	r2, r2, #1
 8003b54:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5e:	d107      	bne.n	8003b70 <UART_Start_Receive_IT+0xdc>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d103      	bne.n	8003b70 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4a0c      	ldr	r2, [pc, #48]	; (8003b9c <UART_Start_Receive_IT+0x108>)
 8003b6c:	665a      	str	r2, [r3, #100]	; 0x64
 8003b6e:	e002      	b.n	8003b76 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4a0b      	ldr	r2, [pc, #44]	; (8003ba0 <UART_Start_Receive_IT+0x10c>)
 8003b74:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003b8c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	08003d39 	.word	0x08003d39
 8003ba0:	08003c61 	.word	0x08003c61

08003ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0201 	bic.w	r2, r2, #1
 8003bca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d107      	bne.n	8003be4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0210 	bic.w	r2, r2, #16
 8003be2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f7ff fb2f 	bl	8003284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c26:	bf00      	nop
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c44:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff fb0c 	bl	8003270 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c58:	bf00      	nop
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c6e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c74:	2b22      	cmp	r3, #34	; 0x22
 8003c76:	d151      	bne.n	8003d1c <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003c7e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003c80:	89bb      	ldrh	r3, [r7, #12]
 8003c82:	b2d9      	uxtb	r1, r3
 8003c84:	89fb      	ldrh	r3, [r7, #14]
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8c:	400a      	ands	r2, r1
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d13a      	bne.n	8003d30 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cc8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0201 	bic.w	r2, r2, #1
 8003cd8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d10f      	bne.n	8003d0e <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0210 	bic.w	r2, r2, #16
 8003cfc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d04:	4619      	mov	r1, r3
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff fac6 	bl	8003298 <HAL_UARTEx_RxEventCallback>
 8003d0c:	e002      	b.n	8003d14 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fc ffd2 	bl	8000cb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d1a:	e009      	b.n	8003d30 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	8b1b      	ldrh	r3, [r3, #24]
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 0208 	orr.w	r2, r2, #8
 8003d2c:	b292      	uxth	r2, r2
 8003d2e:	831a      	strh	r2, [r3, #24]
}
 8003d30:	bf00      	nop
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d46:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d4c:	2b22      	cmp	r3, #34	; 0x22
 8003d4e:	d151      	bne.n	8003df4 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d56:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003d5e:	89ba      	ldrh	r2, [r7, #12]
 8003d60:	89fb      	ldrh	r3, [r7, #14]
 8003d62:	4013      	ands	r3, r2
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	1c9a      	adds	r2, r3, #2
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d13a      	bne.n	8003e08 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003da0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0201 	bic.w	r2, r2, #1
 8003db0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d10f      	bne.n	8003de6 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0210 	bic.w	r2, r2, #16
 8003dd4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ddc:	4619      	mov	r1, r3
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff fa5a 	bl	8003298 <HAL_UARTEx_RxEventCallback>
 8003de4:	e002      	b.n	8003dec <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fc ff66 	bl	8000cb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003df2:	e009      	b.n	8003e08 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	8b1b      	ldrh	r3, [r3, #24]
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0208 	orr.w	r2, r2, #8
 8003e04:	b292      	uxth	r2, r2
 8003e06:	831a      	strh	r2, [r3, #24]
}
 8003e08:	bf00      	nop
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <__errno>:
 8003e24:	4b01      	ldr	r3, [pc, #4]	; (8003e2c <__errno+0x8>)
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	2000000c 	.word	0x2000000c

08003e30 <__libc_init_array>:
 8003e30:	b570      	push	{r4, r5, r6, lr}
 8003e32:	4d0d      	ldr	r5, [pc, #52]	; (8003e68 <__libc_init_array+0x38>)
 8003e34:	4c0d      	ldr	r4, [pc, #52]	; (8003e6c <__libc_init_array+0x3c>)
 8003e36:	1b64      	subs	r4, r4, r5
 8003e38:	10a4      	asrs	r4, r4, #2
 8003e3a:	2600      	movs	r6, #0
 8003e3c:	42a6      	cmp	r6, r4
 8003e3e:	d109      	bne.n	8003e54 <__libc_init_array+0x24>
 8003e40:	4d0b      	ldr	r5, [pc, #44]	; (8003e70 <__libc_init_array+0x40>)
 8003e42:	4c0c      	ldr	r4, [pc, #48]	; (8003e74 <__libc_init_array+0x44>)
 8003e44:	f000 fcf4 	bl	8004830 <_init>
 8003e48:	1b64      	subs	r4, r4, r5
 8003e4a:	10a4      	asrs	r4, r4, #2
 8003e4c:	2600      	movs	r6, #0
 8003e4e:	42a6      	cmp	r6, r4
 8003e50:	d105      	bne.n	8003e5e <__libc_init_array+0x2e>
 8003e52:	bd70      	pop	{r4, r5, r6, pc}
 8003e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e58:	4798      	blx	r3
 8003e5a:	3601      	adds	r6, #1
 8003e5c:	e7ee      	b.n	8003e3c <__libc_init_array+0xc>
 8003e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e62:	4798      	blx	r3
 8003e64:	3601      	adds	r6, #1
 8003e66:	e7f2      	b.n	8003e4e <__libc_init_array+0x1e>
 8003e68:	080049f0 	.word	0x080049f0
 8003e6c:	080049f0 	.word	0x080049f0
 8003e70:	080049f0 	.word	0x080049f0
 8003e74:	080049f4 	.word	0x080049f4

08003e78 <memccpy>:
 8003e78:	b510      	push	{r4, lr}
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	3901      	subs	r1, #1
 8003e7e:	4403      	add	r3, r0
 8003e80:	4298      	cmp	r0, r3
 8003e82:	d101      	bne.n	8003e88 <memccpy+0x10>
 8003e84:	2000      	movs	r0, #0
 8003e86:	e005      	b.n	8003e94 <memccpy+0x1c>
 8003e88:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003e8c:	f800 4b01 	strb.w	r4, [r0], #1
 8003e90:	4294      	cmp	r4, r2
 8003e92:	d1f5      	bne.n	8003e80 <memccpy+0x8>
 8003e94:	bd10      	pop	{r4, pc}

08003e96 <memcpy>:
 8003e96:	440a      	add	r2, r1
 8003e98:	4291      	cmp	r1, r2
 8003e9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e9e:	d100      	bne.n	8003ea2 <memcpy+0xc>
 8003ea0:	4770      	bx	lr
 8003ea2:	b510      	push	{r4, lr}
 8003ea4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ea8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003eac:	4291      	cmp	r1, r2
 8003eae:	d1f9      	bne.n	8003ea4 <memcpy+0xe>
 8003eb0:	bd10      	pop	{r4, pc}

08003eb2 <memset>:
 8003eb2:	4402      	add	r2, r0
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d100      	bne.n	8003ebc <memset+0xa>
 8003eba:	4770      	bx	lr
 8003ebc:	f803 1b01 	strb.w	r1, [r3], #1
 8003ec0:	e7f9      	b.n	8003eb6 <memset+0x4>
	...

08003ec4 <siprintf>:
 8003ec4:	b40e      	push	{r1, r2, r3}
 8003ec6:	b500      	push	{lr}
 8003ec8:	b09c      	sub	sp, #112	; 0x70
 8003eca:	ab1d      	add	r3, sp, #116	; 0x74
 8003ecc:	9002      	str	r0, [sp, #8]
 8003ece:	9006      	str	r0, [sp, #24]
 8003ed0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ed4:	4809      	ldr	r0, [pc, #36]	; (8003efc <siprintf+0x38>)
 8003ed6:	9107      	str	r1, [sp, #28]
 8003ed8:	9104      	str	r1, [sp, #16]
 8003eda:	4909      	ldr	r1, [pc, #36]	; (8003f00 <siprintf+0x3c>)
 8003edc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ee0:	9105      	str	r1, [sp, #20]
 8003ee2:	6800      	ldr	r0, [r0, #0]
 8003ee4:	9301      	str	r3, [sp, #4]
 8003ee6:	a902      	add	r1, sp, #8
 8003ee8:	f000 f8fe 	bl	80040e8 <_svfiprintf_r>
 8003eec:	9b02      	ldr	r3, [sp, #8]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	b01c      	add	sp, #112	; 0x70
 8003ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ef8:	b003      	add	sp, #12
 8003efa:	4770      	bx	lr
 8003efc:	2000000c 	.word	0x2000000c
 8003f00:	ffff0208 	.word	0xffff0208

08003f04 <strcpy>:
 8003f04:	4603      	mov	r3, r0
 8003f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f0a:	f803 2b01 	strb.w	r2, [r3], #1
 8003f0e:	2a00      	cmp	r2, #0
 8003f10:	d1f9      	bne.n	8003f06 <strcpy+0x2>
 8003f12:	4770      	bx	lr

08003f14 <_strtol_l.isra.0>:
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f1a:	d001      	beq.n	8003f20 <_strtol_l.isra.0+0xc>
 8003f1c:	2b24      	cmp	r3, #36	; 0x24
 8003f1e:	d906      	bls.n	8003f2e <_strtol_l.isra.0+0x1a>
 8003f20:	f7ff ff80 	bl	8003e24 <__errno>
 8003f24:	2316      	movs	r3, #22
 8003f26:	6003      	str	r3, [r0, #0]
 8003f28:	2000      	movs	r0, #0
 8003f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f2e:	4f3a      	ldr	r7, [pc, #232]	; (8004018 <_strtol_l.isra.0+0x104>)
 8003f30:	468e      	mov	lr, r1
 8003f32:	4676      	mov	r6, lr
 8003f34:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003f38:	5de5      	ldrb	r5, [r4, r7]
 8003f3a:	f015 0508 	ands.w	r5, r5, #8
 8003f3e:	d1f8      	bne.n	8003f32 <_strtol_l.isra.0+0x1e>
 8003f40:	2c2d      	cmp	r4, #45	; 0x2d
 8003f42:	d134      	bne.n	8003fae <_strtol_l.isra.0+0x9a>
 8003f44:	f89e 4000 	ldrb.w	r4, [lr]
 8003f48:	f04f 0801 	mov.w	r8, #1
 8003f4c:	f106 0e02 	add.w	lr, r6, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d05c      	beq.n	800400e <_strtol_l.isra.0+0xfa>
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d10c      	bne.n	8003f72 <_strtol_l.isra.0+0x5e>
 8003f58:	2c30      	cmp	r4, #48	; 0x30
 8003f5a:	d10a      	bne.n	8003f72 <_strtol_l.isra.0+0x5e>
 8003f5c:	f89e 4000 	ldrb.w	r4, [lr]
 8003f60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003f64:	2c58      	cmp	r4, #88	; 0x58
 8003f66:	d14d      	bne.n	8004004 <_strtol_l.isra.0+0xf0>
 8003f68:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	f10e 0e02 	add.w	lr, lr, #2
 8003f72:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8003f76:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003f7a:	2600      	movs	r6, #0
 8003f7c:	fbbc f9f3 	udiv	r9, ip, r3
 8003f80:	4635      	mov	r5, r6
 8003f82:	fb03 ca19 	mls	sl, r3, r9, ip
 8003f86:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003f8a:	2f09      	cmp	r7, #9
 8003f8c:	d818      	bhi.n	8003fc0 <_strtol_l.isra.0+0xac>
 8003f8e:	463c      	mov	r4, r7
 8003f90:	42a3      	cmp	r3, r4
 8003f92:	dd24      	ble.n	8003fde <_strtol_l.isra.0+0xca>
 8003f94:	2e00      	cmp	r6, #0
 8003f96:	db1f      	blt.n	8003fd8 <_strtol_l.isra.0+0xc4>
 8003f98:	45a9      	cmp	r9, r5
 8003f9a:	d31d      	bcc.n	8003fd8 <_strtol_l.isra.0+0xc4>
 8003f9c:	d101      	bne.n	8003fa2 <_strtol_l.isra.0+0x8e>
 8003f9e:	45a2      	cmp	sl, r4
 8003fa0:	db1a      	blt.n	8003fd8 <_strtol_l.isra.0+0xc4>
 8003fa2:	fb05 4503 	mla	r5, r5, r3, r4
 8003fa6:	2601      	movs	r6, #1
 8003fa8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003fac:	e7eb      	b.n	8003f86 <_strtol_l.isra.0+0x72>
 8003fae:	2c2b      	cmp	r4, #43	; 0x2b
 8003fb0:	bf08      	it	eq
 8003fb2:	f89e 4000 	ldrbeq.w	r4, [lr]
 8003fb6:	46a8      	mov	r8, r5
 8003fb8:	bf08      	it	eq
 8003fba:	f106 0e02 	addeq.w	lr, r6, #2
 8003fbe:	e7c7      	b.n	8003f50 <_strtol_l.isra.0+0x3c>
 8003fc0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003fc4:	2f19      	cmp	r7, #25
 8003fc6:	d801      	bhi.n	8003fcc <_strtol_l.isra.0+0xb8>
 8003fc8:	3c37      	subs	r4, #55	; 0x37
 8003fca:	e7e1      	b.n	8003f90 <_strtol_l.isra.0+0x7c>
 8003fcc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003fd0:	2f19      	cmp	r7, #25
 8003fd2:	d804      	bhi.n	8003fde <_strtol_l.isra.0+0xca>
 8003fd4:	3c57      	subs	r4, #87	; 0x57
 8003fd6:	e7db      	b.n	8003f90 <_strtol_l.isra.0+0x7c>
 8003fd8:	f04f 36ff 	mov.w	r6, #4294967295
 8003fdc:	e7e4      	b.n	8003fa8 <_strtol_l.isra.0+0x94>
 8003fde:	2e00      	cmp	r6, #0
 8003fe0:	da05      	bge.n	8003fee <_strtol_l.isra.0+0xda>
 8003fe2:	2322      	movs	r3, #34	; 0x22
 8003fe4:	6003      	str	r3, [r0, #0]
 8003fe6:	4665      	mov	r5, ip
 8003fe8:	b942      	cbnz	r2, 8003ffc <_strtol_l.isra.0+0xe8>
 8003fea:	4628      	mov	r0, r5
 8003fec:	e79d      	b.n	8003f2a <_strtol_l.isra.0+0x16>
 8003fee:	f1b8 0f00 	cmp.w	r8, #0
 8003ff2:	d000      	beq.n	8003ff6 <_strtol_l.isra.0+0xe2>
 8003ff4:	426d      	negs	r5, r5
 8003ff6:	2a00      	cmp	r2, #0
 8003ff8:	d0f7      	beq.n	8003fea <_strtol_l.isra.0+0xd6>
 8003ffa:	b10e      	cbz	r6, 8004000 <_strtol_l.isra.0+0xec>
 8003ffc:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004000:	6011      	str	r1, [r2, #0]
 8004002:	e7f2      	b.n	8003fea <_strtol_l.isra.0+0xd6>
 8004004:	2430      	movs	r4, #48	; 0x30
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1b3      	bne.n	8003f72 <_strtol_l.isra.0+0x5e>
 800400a:	2308      	movs	r3, #8
 800400c:	e7b1      	b.n	8003f72 <_strtol_l.isra.0+0x5e>
 800400e:	2c30      	cmp	r4, #48	; 0x30
 8004010:	d0a4      	beq.n	8003f5c <_strtol_l.isra.0+0x48>
 8004012:	230a      	movs	r3, #10
 8004014:	e7ad      	b.n	8003f72 <_strtol_l.isra.0+0x5e>
 8004016:	bf00      	nop
 8004018:	080048b5 	.word	0x080048b5

0800401c <strtol>:
 800401c:	4613      	mov	r3, r2
 800401e:	460a      	mov	r2, r1
 8004020:	4601      	mov	r1, r0
 8004022:	4802      	ldr	r0, [pc, #8]	; (800402c <strtol+0x10>)
 8004024:	6800      	ldr	r0, [r0, #0]
 8004026:	f7ff bf75 	b.w	8003f14 <_strtol_l.isra.0>
 800402a:	bf00      	nop
 800402c:	2000000c 	.word	0x2000000c

08004030 <__ssputs_r>:
 8004030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004034:	688e      	ldr	r6, [r1, #8]
 8004036:	429e      	cmp	r6, r3
 8004038:	4682      	mov	sl, r0
 800403a:	460c      	mov	r4, r1
 800403c:	4690      	mov	r8, r2
 800403e:	461f      	mov	r7, r3
 8004040:	d838      	bhi.n	80040b4 <__ssputs_r+0x84>
 8004042:	898a      	ldrh	r2, [r1, #12]
 8004044:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004048:	d032      	beq.n	80040b0 <__ssputs_r+0x80>
 800404a:	6825      	ldr	r5, [r4, #0]
 800404c:	6909      	ldr	r1, [r1, #16]
 800404e:	eba5 0901 	sub.w	r9, r5, r1
 8004052:	6965      	ldr	r5, [r4, #20]
 8004054:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004058:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800405c:	3301      	adds	r3, #1
 800405e:	444b      	add	r3, r9
 8004060:	106d      	asrs	r5, r5, #1
 8004062:	429d      	cmp	r5, r3
 8004064:	bf38      	it	cc
 8004066:	461d      	movcc	r5, r3
 8004068:	0553      	lsls	r3, r2, #21
 800406a:	d531      	bpl.n	80040d0 <__ssputs_r+0xa0>
 800406c:	4629      	mov	r1, r5
 800406e:	f000 fb39 	bl	80046e4 <_malloc_r>
 8004072:	4606      	mov	r6, r0
 8004074:	b950      	cbnz	r0, 800408c <__ssputs_r+0x5c>
 8004076:	230c      	movs	r3, #12
 8004078:	f8ca 3000 	str.w	r3, [sl]
 800407c:	89a3      	ldrh	r3, [r4, #12]
 800407e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004082:	81a3      	strh	r3, [r4, #12]
 8004084:	f04f 30ff 	mov.w	r0, #4294967295
 8004088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800408c:	6921      	ldr	r1, [r4, #16]
 800408e:	464a      	mov	r2, r9
 8004090:	f7ff ff01 	bl	8003e96 <memcpy>
 8004094:	89a3      	ldrh	r3, [r4, #12]
 8004096:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800409a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409e:	81a3      	strh	r3, [r4, #12]
 80040a0:	6126      	str	r6, [r4, #16]
 80040a2:	6165      	str	r5, [r4, #20]
 80040a4:	444e      	add	r6, r9
 80040a6:	eba5 0509 	sub.w	r5, r5, r9
 80040aa:	6026      	str	r6, [r4, #0]
 80040ac:	60a5      	str	r5, [r4, #8]
 80040ae:	463e      	mov	r6, r7
 80040b0:	42be      	cmp	r6, r7
 80040b2:	d900      	bls.n	80040b6 <__ssputs_r+0x86>
 80040b4:	463e      	mov	r6, r7
 80040b6:	4632      	mov	r2, r6
 80040b8:	6820      	ldr	r0, [r4, #0]
 80040ba:	4641      	mov	r1, r8
 80040bc:	f000 faa8 	bl	8004610 <memmove>
 80040c0:	68a3      	ldr	r3, [r4, #8]
 80040c2:	6822      	ldr	r2, [r4, #0]
 80040c4:	1b9b      	subs	r3, r3, r6
 80040c6:	4432      	add	r2, r6
 80040c8:	60a3      	str	r3, [r4, #8]
 80040ca:	6022      	str	r2, [r4, #0]
 80040cc:	2000      	movs	r0, #0
 80040ce:	e7db      	b.n	8004088 <__ssputs_r+0x58>
 80040d0:	462a      	mov	r2, r5
 80040d2:	f000 fb61 	bl	8004798 <_realloc_r>
 80040d6:	4606      	mov	r6, r0
 80040d8:	2800      	cmp	r0, #0
 80040da:	d1e1      	bne.n	80040a0 <__ssputs_r+0x70>
 80040dc:	6921      	ldr	r1, [r4, #16]
 80040de:	4650      	mov	r0, sl
 80040e0:	f000 fab0 	bl	8004644 <_free_r>
 80040e4:	e7c7      	b.n	8004076 <__ssputs_r+0x46>
	...

080040e8 <_svfiprintf_r>:
 80040e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ec:	4698      	mov	r8, r3
 80040ee:	898b      	ldrh	r3, [r1, #12]
 80040f0:	061b      	lsls	r3, r3, #24
 80040f2:	b09d      	sub	sp, #116	; 0x74
 80040f4:	4607      	mov	r7, r0
 80040f6:	460d      	mov	r5, r1
 80040f8:	4614      	mov	r4, r2
 80040fa:	d50e      	bpl.n	800411a <_svfiprintf_r+0x32>
 80040fc:	690b      	ldr	r3, [r1, #16]
 80040fe:	b963      	cbnz	r3, 800411a <_svfiprintf_r+0x32>
 8004100:	2140      	movs	r1, #64	; 0x40
 8004102:	f000 faef 	bl	80046e4 <_malloc_r>
 8004106:	6028      	str	r0, [r5, #0]
 8004108:	6128      	str	r0, [r5, #16]
 800410a:	b920      	cbnz	r0, 8004116 <_svfiprintf_r+0x2e>
 800410c:	230c      	movs	r3, #12
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	f04f 30ff 	mov.w	r0, #4294967295
 8004114:	e0d1      	b.n	80042ba <_svfiprintf_r+0x1d2>
 8004116:	2340      	movs	r3, #64	; 0x40
 8004118:	616b      	str	r3, [r5, #20]
 800411a:	2300      	movs	r3, #0
 800411c:	9309      	str	r3, [sp, #36]	; 0x24
 800411e:	2320      	movs	r3, #32
 8004120:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004124:	f8cd 800c 	str.w	r8, [sp, #12]
 8004128:	2330      	movs	r3, #48	; 0x30
 800412a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80042d4 <_svfiprintf_r+0x1ec>
 800412e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004132:	f04f 0901 	mov.w	r9, #1
 8004136:	4623      	mov	r3, r4
 8004138:	469a      	mov	sl, r3
 800413a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800413e:	b10a      	cbz	r2, 8004144 <_svfiprintf_r+0x5c>
 8004140:	2a25      	cmp	r2, #37	; 0x25
 8004142:	d1f9      	bne.n	8004138 <_svfiprintf_r+0x50>
 8004144:	ebba 0b04 	subs.w	fp, sl, r4
 8004148:	d00b      	beq.n	8004162 <_svfiprintf_r+0x7a>
 800414a:	465b      	mov	r3, fp
 800414c:	4622      	mov	r2, r4
 800414e:	4629      	mov	r1, r5
 8004150:	4638      	mov	r0, r7
 8004152:	f7ff ff6d 	bl	8004030 <__ssputs_r>
 8004156:	3001      	adds	r0, #1
 8004158:	f000 80aa 	beq.w	80042b0 <_svfiprintf_r+0x1c8>
 800415c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800415e:	445a      	add	r2, fp
 8004160:	9209      	str	r2, [sp, #36]	; 0x24
 8004162:	f89a 3000 	ldrb.w	r3, [sl]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 80a2 	beq.w	80042b0 <_svfiprintf_r+0x1c8>
 800416c:	2300      	movs	r3, #0
 800416e:	f04f 32ff 	mov.w	r2, #4294967295
 8004172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004176:	f10a 0a01 	add.w	sl, sl, #1
 800417a:	9304      	str	r3, [sp, #16]
 800417c:	9307      	str	r3, [sp, #28]
 800417e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004182:	931a      	str	r3, [sp, #104]	; 0x68
 8004184:	4654      	mov	r4, sl
 8004186:	2205      	movs	r2, #5
 8004188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800418c:	4851      	ldr	r0, [pc, #324]	; (80042d4 <_svfiprintf_r+0x1ec>)
 800418e:	f7fc f81f 	bl	80001d0 <memchr>
 8004192:	9a04      	ldr	r2, [sp, #16]
 8004194:	b9d8      	cbnz	r0, 80041ce <_svfiprintf_r+0xe6>
 8004196:	06d0      	lsls	r0, r2, #27
 8004198:	bf44      	itt	mi
 800419a:	2320      	movmi	r3, #32
 800419c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041a0:	0711      	lsls	r1, r2, #28
 80041a2:	bf44      	itt	mi
 80041a4:	232b      	movmi	r3, #43	; 0x2b
 80041a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041aa:	f89a 3000 	ldrb.w	r3, [sl]
 80041ae:	2b2a      	cmp	r3, #42	; 0x2a
 80041b0:	d015      	beq.n	80041de <_svfiprintf_r+0xf6>
 80041b2:	9a07      	ldr	r2, [sp, #28]
 80041b4:	4654      	mov	r4, sl
 80041b6:	2000      	movs	r0, #0
 80041b8:	f04f 0c0a 	mov.w	ip, #10
 80041bc:	4621      	mov	r1, r4
 80041be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041c2:	3b30      	subs	r3, #48	; 0x30
 80041c4:	2b09      	cmp	r3, #9
 80041c6:	d94e      	bls.n	8004266 <_svfiprintf_r+0x17e>
 80041c8:	b1b0      	cbz	r0, 80041f8 <_svfiprintf_r+0x110>
 80041ca:	9207      	str	r2, [sp, #28]
 80041cc:	e014      	b.n	80041f8 <_svfiprintf_r+0x110>
 80041ce:	eba0 0308 	sub.w	r3, r0, r8
 80041d2:	fa09 f303 	lsl.w	r3, r9, r3
 80041d6:	4313      	orrs	r3, r2
 80041d8:	9304      	str	r3, [sp, #16]
 80041da:	46a2      	mov	sl, r4
 80041dc:	e7d2      	b.n	8004184 <_svfiprintf_r+0x9c>
 80041de:	9b03      	ldr	r3, [sp, #12]
 80041e0:	1d19      	adds	r1, r3, #4
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	9103      	str	r1, [sp, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	bfbb      	ittet	lt
 80041ea:	425b      	neglt	r3, r3
 80041ec:	f042 0202 	orrlt.w	r2, r2, #2
 80041f0:	9307      	strge	r3, [sp, #28]
 80041f2:	9307      	strlt	r3, [sp, #28]
 80041f4:	bfb8      	it	lt
 80041f6:	9204      	strlt	r2, [sp, #16]
 80041f8:	7823      	ldrb	r3, [r4, #0]
 80041fa:	2b2e      	cmp	r3, #46	; 0x2e
 80041fc:	d10c      	bne.n	8004218 <_svfiprintf_r+0x130>
 80041fe:	7863      	ldrb	r3, [r4, #1]
 8004200:	2b2a      	cmp	r3, #42	; 0x2a
 8004202:	d135      	bne.n	8004270 <_svfiprintf_r+0x188>
 8004204:	9b03      	ldr	r3, [sp, #12]
 8004206:	1d1a      	adds	r2, r3, #4
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	9203      	str	r2, [sp, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	bfb8      	it	lt
 8004210:	f04f 33ff 	movlt.w	r3, #4294967295
 8004214:	3402      	adds	r4, #2
 8004216:	9305      	str	r3, [sp, #20]
 8004218:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80042e4 <_svfiprintf_r+0x1fc>
 800421c:	7821      	ldrb	r1, [r4, #0]
 800421e:	2203      	movs	r2, #3
 8004220:	4650      	mov	r0, sl
 8004222:	f7fb ffd5 	bl	80001d0 <memchr>
 8004226:	b140      	cbz	r0, 800423a <_svfiprintf_r+0x152>
 8004228:	2340      	movs	r3, #64	; 0x40
 800422a:	eba0 000a 	sub.w	r0, r0, sl
 800422e:	fa03 f000 	lsl.w	r0, r3, r0
 8004232:	9b04      	ldr	r3, [sp, #16]
 8004234:	4303      	orrs	r3, r0
 8004236:	3401      	adds	r4, #1
 8004238:	9304      	str	r3, [sp, #16]
 800423a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800423e:	4826      	ldr	r0, [pc, #152]	; (80042d8 <_svfiprintf_r+0x1f0>)
 8004240:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004244:	2206      	movs	r2, #6
 8004246:	f7fb ffc3 	bl	80001d0 <memchr>
 800424a:	2800      	cmp	r0, #0
 800424c:	d038      	beq.n	80042c0 <_svfiprintf_r+0x1d8>
 800424e:	4b23      	ldr	r3, [pc, #140]	; (80042dc <_svfiprintf_r+0x1f4>)
 8004250:	bb1b      	cbnz	r3, 800429a <_svfiprintf_r+0x1b2>
 8004252:	9b03      	ldr	r3, [sp, #12]
 8004254:	3307      	adds	r3, #7
 8004256:	f023 0307 	bic.w	r3, r3, #7
 800425a:	3308      	adds	r3, #8
 800425c:	9303      	str	r3, [sp, #12]
 800425e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004260:	4433      	add	r3, r6
 8004262:	9309      	str	r3, [sp, #36]	; 0x24
 8004264:	e767      	b.n	8004136 <_svfiprintf_r+0x4e>
 8004266:	fb0c 3202 	mla	r2, ip, r2, r3
 800426a:	460c      	mov	r4, r1
 800426c:	2001      	movs	r0, #1
 800426e:	e7a5      	b.n	80041bc <_svfiprintf_r+0xd4>
 8004270:	2300      	movs	r3, #0
 8004272:	3401      	adds	r4, #1
 8004274:	9305      	str	r3, [sp, #20]
 8004276:	4619      	mov	r1, r3
 8004278:	f04f 0c0a 	mov.w	ip, #10
 800427c:	4620      	mov	r0, r4
 800427e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004282:	3a30      	subs	r2, #48	; 0x30
 8004284:	2a09      	cmp	r2, #9
 8004286:	d903      	bls.n	8004290 <_svfiprintf_r+0x1a8>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0c5      	beq.n	8004218 <_svfiprintf_r+0x130>
 800428c:	9105      	str	r1, [sp, #20]
 800428e:	e7c3      	b.n	8004218 <_svfiprintf_r+0x130>
 8004290:	fb0c 2101 	mla	r1, ip, r1, r2
 8004294:	4604      	mov	r4, r0
 8004296:	2301      	movs	r3, #1
 8004298:	e7f0      	b.n	800427c <_svfiprintf_r+0x194>
 800429a:	ab03      	add	r3, sp, #12
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	462a      	mov	r2, r5
 80042a0:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <_svfiprintf_r+0x1f8>)
 80042a2:	a904      	add	r1, sp, #16
 80042a4:	4638      	mov	r0, r7
 80042a6:	f3af 8000 	nop.w
 80042aa:	1c42      	adds	r2, r0, #1
 80042ac:	4606      	mov	r6, r0
 80042ae:	d1d6      	bne.n	800425e <_svfiprintf_r+0x176>
 80042b0:	89ab      	ldrh	r3, [r5, #12]
 80042b2:	065b      	lsls	r3, r3, #25
 80042b4:	f53f af2c 	bmi.w	8004110 <_svfiprintf_r+0x28>
 80042b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042ba:	b01d      	add	sp, #116	; 0x74
 80042bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c0:	ab03      	add	r3, sp, #12
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	462a      	mov	r2, r5
 80042c6:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <_svfiprintf_r+0x1f8>)
 80042c8:	a904      	add	r1, sp, #16
 80042ca:	4638      	mov	r0, r7
 80042cc:	f000 f87a 	bl	80043c4 <_printf_i>
 80042d0:	e7eb      	b.n	80042aa <_svfiprintf_r+0x1c2>
 80042d2:	bf00      	nop
 80042d4:	080049b5 	.word	0x080049b5
 80042d8:	080049bf 	.word	0x080049bf
 80042dc:	00000000 	.word	0x00000000
 80042e0:	08004031 	.word	0x08004031
 80042e4:	080049bb 	.word	0x080049bb

080042e8 <_printf_common>:
 80042e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042ec:	4616      	mov	r6, r2
 80042ee:	4699      	mov	r9, r3
 80042f0:	688a      	ldr	r2, [r1, #8]
 80042f2:	690b      	ldr	r3, [r1, #16]
 80042f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042f8:	4293      	cmp	r3, r2
 80042fa:	bfb8      	it	lt
 80042fc:	4613      	movlt	r3, r2
 80042fe:	6033      	str	r3, [r6, #0]
 8004300:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004304:	4607      	mov	r7, r0
 8004306:	460c      	mov	r4, r1
 8004308:	b10a      	cbz	r2, 800430e <_printf_common+0x26>
 800430a:	3301      	adds	r3, #1
 800430c:	6033      	str	r3, [r6, #0]
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	0699      	lsls	r1, r3, #26
 8004312:	bf42      	ittt	mi
 8004314:	6833      	ldrmi	r3, [r6, #0]
 8004316:	3302      	addmi	r3, #2
 8004318:	6033      	strmi	r3, [r6, #0]
 800431a:	6825      	ldr	r5, [r4, #0]
 800431c:	f015 0506 	ands.w	r5, r5, #6
 8004320:	d106      	bne.n	8004330 <_printf_common+0x48>
 8004322:	f104 0a19 	add.w	sl, r4, #25
 8004326:	68e3      	ldr	r3, [r4, #12]
 8004328:	6832      	ldr	r2, [r6, #0]
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	42ab      	cmp	r3, r5
 800432e:	dc26      	bgt.n	800437e <_printf_common+0x96>
 8004330:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004334:	1e13      	subs	r3, r2, #0
 8004336:	6822      	ldr	r2, [r4, #0]
 8004338:	bf18      	it	ne
 800433a:	2301      	movne	r3, #1
 800433c:	0692      	lsls	r2, r2, #26
 800433e:	d42b      	bmi.n	8004398 <_printf_common+0xb0>
 8004340:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004344:	4649      	mov	r1, r9
 8004346:	4638      	mov	r0, r7
 8004348:	47c0      	blx	r8
 800434a:	3001      	adds	r0, #1
 800434c:	d01e      	beq.n	800438c <_printf_common+0xa4>
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	68e5      	ldr	r5, [r4, #12]
 8004352:	6832      	ldr	r2, [r6, #0]
 8004354:	f003 0306 	and.w	r3, r3, #6
 8004358:	2b04      	cmp	r3, #4
 800435a:	bf08      	it	eq
 800435c:	1aad      	subeq	r5, r5, r2
 800435e:	68a3      	ldr	r3, [r4, #8]
 8004360:	6922      	ldr	r2, [r4, #16]
 8004362:	bf0c      	ite	eq
 8004364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004368:	2500      	movne	r5, #0
 800436a:	4293      	cmp	r3, r2
 800436c:	bfc4      	itt	gt
 800436e:	1a9b      	subgt	r3, r3, r2
 8004370:	18ed      	addgt	r5, r5, r3
 8004372:	2600      	movs	r6, #0
 8004374:	341a      	adds	r4, #26
 8004376:	42b5      	cmp	r5, r6
 8004378:	d11a      	bne.n	80043b0 <_printf_common+0xc8>
 800437a:	2000      	movs	r0, #0
 800437c:	e008      	b.n	8004390 <_printf_common+0xa8>
 800437e:	2301      	movs	r3, #1
 8004380:	4652      	mov	r2, sl
 8004382:	4649      	mov	r1, r9
 8004384:	4638      	mov	r0, r7
 8004386:	47c0      	blx	r8
 8004388:	3001      	adds	r0, #1
 800438a:	d103      	bne.n	8004394 <_printf_common+0xac>
 800438c:	f04f 30ff 	mov.w	r0, #4294967295
 8004390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004394:	3501      	adds	r5, #1
 8004396:	e7c6      	b.n	8004326 <_printf_common+0x3e>
 8004398:	18e1      	adds	r1, r4, r3
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	2030      	movs	r0, #48	; 0x30
 800439e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043a2:	4422      	add	r2, r4
 80043a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043ac:	3302      	adds	r3, #2
 80043ae:	e7c7      	b.n	8004340 <_printf_common+0x58>
 80043b0:	2301      	movs	r3, #1
 80043b2:	4622      	mov	r2, r4
 80043b4:	4649      	mov	r1, r9
 80043b6:	4638      	mov	r0, r7
 80043b8:	47c0      	blx	r8
 80043ba:	3001      	adds	r0, #1
 80043bc:	d0e6      	beq.n	800438c <_printf_common+0xa4>
 80043be:	3601      	adds	r6, #1
 80043c0:	e7d9      	b.n	8004376 <_printf_common+0x8e>
	...

080043c4 <_printf_i>:
 80043c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043c8:	460c      	mov	r4, r1
 80043ca:	4691      	mov	r9, r2
 80043cc:	7e27      	ldrb	r7, [r4, #24]
 80043ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80043d0:	2f78      	cmp	r7, #120	; 0x78
 80043d2:	4680      	mov	r8, r0
 80043d4:	469a      	mov	sl, r3
 80043d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043da:	d807      	bhi.n	80043ec <_printf_i+0x28>
 80043dc:	2f62      	cmp	r7, #98	; 0x62
 80043de:	d80a      	bhi.n	80043f6 <_printf_i+0x32>
 80043e0:	2f00      	cmp	r7, #0
 80043e2:	f000 80d8 	beq.w	8004596 <_printf_i+0x1d2>
 80043e6:	2f58      	cmp	r7, #88	; 0x58
 80043e8:	f000 80a3 	beq.w	8004532 <_printf_i+0x16e>
 80043ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043f4:	e03a      	b.n	800446c <_printf_i+0xa8>
 80043f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043fa:	2b15      	cmp	r3, #21
 80043fc:	d8f6      	bhi.n	80043ec <_printf_i+0x28>
 80043fe:	a001      	add	r0, pc, #4	; (adr r0, 8004404 <_printf_i+0x40>)
 8004400:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004404:	0800445d 	.word	0x0800445d
 8004408:	08004471 	.word	0x08004471
 800440c:	080043ed 	.word	0x080043ed
 8004410:	080043ed 	.word	0x080043ed
 8004414:	080043ed 	.word	0x080043ed
 8004418:	080043ed 	.word	0x080043ed
 800441c:	08004471 	.word	0x08004471
 8004420:	080043ed 	.word	0x080043ed
 8004424:	080043ed 	.word	0x080043ed
 8004428:	080043ed 	.word	0x080043ed
 800442c:	080043ed 	.word	0x080043ed
 8004430:	0800457d 	.word	0x0800457d
 8004434:	080044a1 	.word	0x080044a1
 8004438:	0800455f 	.word	0x0800455f
 800443c:	080043ed 	.word	0x080043ed
 8004440:	080043ed 	.word	0x080043ed
 8004444:	0800459f 	.word	0x0800459f
 8004448:	080043ed 	.word	0x080043ed
 800444c:	080044a1 	.word	0x080044a1
 8004450:	080043ed 	.word	0x080043ed
 8004454:	080043ed 	.word	0x080043ed
 8004458:	08004567 	.word	0x08004567
 800445c:	680b      	ldr	r3, [r1, #0]
 800445e:	1d1a      	adds	r2, r3, #4
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	600a      	str	r2, [r1, #0]
 8004464:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800446c:	2301      	movs	r3, #1
 800446e:	e0a3      	b.n	80045b8 <_printf_i+0x1f4>
 8004470:	6825      	ldr	r5, [r4, #0]
 8004472:	6808      	ldr	r0, [r1, #0]
 8004474:	062e      	lsls	r6, r5, #24
 8004476:	f100 0304 	add.w	r3, r0, #4
 800447a:	d50a      	bpl.n	8004492 <_printf_i+0xce>
 800447c:	6805      	ldr	r5, [r0, #0]
 800447e:	600b      	str	r3, [r1, #0]
 8004480:	2d00      	cmp	r5, #0
 8004482:	da03      	bge.n	800448c <_printf_i+0xc8>
 8004484:	232d      	movs	r3, #45	; 0x2d
 8004486:	426d      	negs	r5, r5
 8004488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800448c:	485e      	ldr	r0, [pc, #376]	; (8004608 <_printf_i+0x244>)
 800448e:	230a      	movs	r3, #10
 8004490:	e019      	b.n	80044c6 <_printf_i+0x102>
 8004492:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004496:	6805      	ldr	r5, [r0, #0]
 8004498:	600b      	str	r3, [r1, #0]
 800449a:	bf18      	it	ne
 800449c:	b22d      	sxthne	r5, r5
 800449e:	e7ef      	b.n	8004480 <_printf_i+0xbc>
 80044a0:	680b      	ldr	r3, [r1, #0]
 80044a2:	6825      	ldr	r5, [r4, #0]
 80044a4:	1d18      	adds	r0, r3, #4
 80044a6:	6008      	str	r0, [r1, #0]
 80044a8:	0628      	lsls	r0, r5, #24
 80044aa:	d501      	bpl.n	80044b0 <_printf_i+0xec>
 80044ac:	681d      	ldr	r5, [r3, #0]
 80044ae:	e002      	b.n	80044b6 <_printf_i+0xf2>
 80044b0:	0669      	lsls	r1, r5, #25
 80044b2:	d5fb      	bpl.n	80044ac <_printf_i+0xe8>
 80044b4:	881d      	ldrh	r5, [r3, #0]
 80044b6:	4854      	ldr	r0, [pc, #336]	; (8004608 <_printf_i+0x244>)
 80044b8:	2f6f      	cmp	r7, #111	; 0x6f
 80044ba:	bf0c      	ite	eq
 80044bc:	2308      	moveq	r3, #8
 80044be:	230a      	movne	r3, #10
 80044c0:	2100      	movs	r1, #0
 80044c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044c6:	6866      	ldr	r6, [r4, #4]
 80044c8:	60a6      	str	r6, [r4, #8]
 80044ca:	2e00      	cmp	r6, #0
 80044cc:	bfa2      	ittt	ge
 80044ce:	6821      	ldrge	r1, [r4, #0]
 80044d0:	f021 0104 	bicge.w	r1, r1, #4
 80044d4:	6021      	strge	r1, [r4, #0]
 80044d6:	b90d      	cbnz	r5, 80044dc <_printf_i+0x118>
 80044d8:	2e00      	cmp	r6, #0
 80044da:	d04d      	beq.n	8004578 <_printf_i+0x1b4>
 80044dc:	4616      	mov	r6, r2
 80044de:	fbb5 f1f3 	udiv	r1, r5, r3
 80044e2:	fb03 5711 	mls	r7, r3, r1, r5
 80044e6:	5dc7      	ldrb	r7, [r0, r7]
 80044e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044ec:	462f      	mov	r7, r5
 80044ee:	42bb      	cmp	r3, r7
 80044f0:	460d      	mov	r5, r1
 80044f2:	d9f4      	bls.n	80044de <_printf_i+0x11a>
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d10b      	bne.n	8004510 <_printf_i+0x14c>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	07df      	lsls	r7, r3, #31
 80044fc:	d508      	bpl.n	8004510 <_printf_i+0x14c>
 80044fe:	6923      	ldr	r3, [r4, #16]
 8004500:	6861      	ldr	r1, [r4, #4]
 8004502:	4299      	cmp	r1, r3
 8004504:	bfde      	ittt	le
 8004506:	2330      	movle	r3, #48	; 0x30
 8004508:	f806 3c01 	strble.w	r3, [r6, #-1]
 800450c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004510:	1b92      	subs	r2, r2, r6
 8004512:	6122      	str	r2, [r4, #16]
 8004514:	f8cd a000 	str.w	sl, [sp]
 8004518:	464b      	mov	r3, r9
 800451a:	aa03      	add	r2, sp, #12
 800451c:	4621      	mov	r1, r4
 800451e:	4640      	mov	r0, r8
 8004520:	f7ff fee2 	bl	80042e8 <_printf_common>
 8004524:	3001      	adds	r0, #1
 8004526:	d14c      	bne.n	80045c2 <_printf_i+0x1fe>
 8004528:	f04f 30ff 	mov.w	r0, #4294967295
 800452c:	b004      	add	sp, #16
 800452e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004532:	4835      	ldr	r0, [pc, #212]	; (8004608 <_printf_i+0x244>)
 8004534:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	680e      	ldr	r6, [r1, #0]
 800453c:	061f      	lsls	r7, r3, #24
 800453e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004542:	600e      	str	r6, [r1, #0]
 8004544:	d514      	bpl.n	8004570 <_printf_i+0x1ac>
 8004546:	07d9      	lsls	r1, r3, #31
 8004548:	bf44      	itt	mi
 800454a:	f043 0320 	orrmi.w	r3, r3, #32
 800454e:	6023      	strmi	r3, [r4, #0]
 8004550:	b91d      	cbnz	r5, 800455a <_printf_i+0x196>
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	f023 0320 	bic.w	r3, r3, #32
 8004558:	6023      	str	r3, [r4, #0]
 800455a:	2310      	movs	r3, #16
 800455c:	e7b0      	b.n	80044c0 <_printf_i+0xfc>
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	f043 0320 	orr.w	r3, r3, #32
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	2378      	movs	r3, #120	; 0x78
 8004568:	4828      	ldr	r0, [pc, #160]	; (800460c <_printf_i+0x248>)
 800456a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800456e:	e7e3      	b.n	8004538 <_printf_i+0x174>
 8004570:	065e      	lsls	r6, r3, #25
 8004572:	bf48      	it	mi
 8004574:	b2ad      	uxthmi	r5, r5
 8004576:	e7e6      	b.n	8004546 <_printf_i+0x182>
 8004578:	4616      	mov	r6, r2
 800457a:	e7bb      	b.n	80044f4 <_printf_i+0x130>
 800457c:	680b      	ldr	r3, [r1, #0]
 800457e:	6826      	ldr	r6, [r4, #0]
 8004580:	6960      	ldr	r0, [r4, #20]
 8004582:	1d1d      	adds	r5, r3, #4
 8004584:	600d      	str	r5, [r1, #0]
 8004586:	0635      	lsls	r5, r6, #24
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	d501      	bpl.n	8004590 <_printf_i+0x1cc>
 800458c:	6018      	str	r0, [r3, #0]
 800458e:	e002      	b.n	8004596 <_printf_i+0x1d2>
 8004590:	0671      	lsls	r1, r6, #25
 8004592:	d5fb      	bpl.n	800458c <_printf_i+0x1c8>
 8004594:	8018      	strh	r0, [r3, #0]
 8004596:	2300      	movs	r3, #0
 8004598:	6123      	str	r3, [r4, #16]
 800459a:	4616      	mov	r6, r2
 800459c:	e7ba      	b.n	8004514 <_printf_i+0x150>
 800459e:	680b      	ldr	r3, [r1, #0]
 80045a0:	1d1a      	adds	r2, r3, #4
 80045a2:	600a      	str	r2, [r1, #0]
 80045a4:	681e      	ldr	r6, [r3, #0]
 80045a6:	6862      	ldr	r2, [r4, #4]
 80045a8:	2100      	movs	r1, #0
 80045aa:	4630      	mov	r0, r6
 80045ac:	f7fb fe10 	bl	80001d0 <memchr>
 80045b0:	b108      	cbz	r0, 80045b6 <_printf_i+0x1f2>
 80045b2:	1b80      	subs	r0, r0, r6
 80045b4:	6060      	str	r0, [r4, #4]
 80045b6:	6863      	ldr	r3, [r4, #4]
 80045b8:	6123      	str	r3, [r4, #16]
 80045ba:	2300      	movs	r3, #0
 80045bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045c0:	e7a8      	b.n	8004514 <_printf_i+0x150>
 80045c2:	6923      	ldr	r3, [r4, #16]
 80045c4:	4632      	mov	r2, r6
 80045c6:	4649      	mov	r1, r9
 80045c8:	4640      	mov	r0, r8
 80045ca:	47d0      	blx	sl
 80045cc:	3001      	adds	r0, #1
 80045ce:	d0ab      	beq.n	8004528 <_printf_i+0x164>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	079b      	lsls	r3, r3, #30
 80045d4:	d413      	bmi.n	80045fe <_printf_i+0x23a>
 80045d6:	68e0      	ldr	r0, [r4, #12]
 80045d8:	9b03      	ldr	r3, [sp, #12]
 80045da:	4298      	cmp	r0, r3
 80045dc:	bfb8      	it	lt
 80045de:	4618      	movlt	r0, r3
 80045e0:	e7a4      	b.n	800452c <_printf_i+0x168>
 80045e2:	2301      	movs	r3, #1
 80045e4:	4632      	mov	r2, r6
 80045e6:	4649      	mov	r1, r9
 80045e8:	4640      	mov	r0, r8
 80045ea:	47d0      	blx	sl
 80045ec:	3001      	adds	r0, #1
 80045ee:	d09b      	beq.n	8004528 <_printf_i+0x164>
 80045f0:	3501      	adds	r5, #1
 80045f2:	68e3      	ldr	r3, [r4, #12]
 80045f4:	9903      	ldr	r1, [sp, #12]
 80045f6:	1a5b      	subs	r3, r3, r1
 80045f8:	42ab      	cmp	r3, r5
 80045fa:	dcf2      	bgt.n	80045e2 <_printf_i+0x21e>
 80045fc:	e7eb      	b.n	80045d6 <_printf_i+0x212>
 80045fe:	2500      	movs	r5, #0
 8004600:	f104 0619 	add.w	r6, r4, #25
 8004604:	e7f5      	b.n	80045f2 <_printf_i+0x22e>
 8004606:	bf00      	nop
 8004608:	080049c6 	.word	0x080049c6
 800460c:	080049d7 	.word	0x080049d7

08004610 <memmove>:
 8004610:	4288      	cmp	r0, r1
 8004612:	b510      	push	{r4, lr}
 8004614:	eb01 0402 	add.w	r4, r1, r2
 8004618:	d902      	bls.n	8004620 <memmove+0x10>
 800461a:	4284      	cmp	r4, r0
 800461c:	4623      	mov	r3, r4
 800461e:	d807      	bhi.n	8004630 <memmove+0x20>
 8004620:	1e43      	subs	r3, r0, #1
 8004622:	42a1      	cmp	r1, r4
 8004624:	d008      	beq.n	8004638 <memmove+0x28>
 8004626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800462a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800462e:	e7f8      	b.n	8004622 <memmove+0x12>
 8004630:	4402      	add	r2, r0
 8004632:	4601      	mov	r1, r0
 8004634:	428a      	cmp	r2, r1
 8004636:	d100      	bne.n	800463a <memmove+0x2a>
 8004638:	bd10      	pop	{r4, pc}
 800463a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800463e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004642:	e7f7      	b.n	8004634 <memmove+0x24>

08004644 <_free_r>:
 8004644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004646:	2900      	cmp	r1, #0
 8004648:	d048      	beq.n	80046dc <_free_r+0x98>
 800464a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800464e:	9001      	str	r0, [sp, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	f1a1 0404 	sub.w	r4, r1, #4
 8004656:	bfb8      	it	lt
 8004658:	18e4      	addlt	r4, r4, r3
 800465a:	f000 f8d3 	bl	8004804 <__malloc_lock>
 800465e:	4a20      	ldr	r2, [pc, #128]	; (80046e0 <_free_r+0x9c>)
 8004660:	9801      	ldr	r0, [sp, #4]
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	4615      	mov	r5, r2
 8004666:	b933      	cbnz	r3, 8004676 <_free_r+0x32>
 8004668:	6063      	str	r3, [r4, #4]
 800466a:	6014      	str	r4, [r2, #0]
 800466c:	b003      	add	sp, #12
 800466e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004672:	f000 b8cd 	b.w	8004810 <__malloc_unlock>
 8004676:	42a3      	cmp	r3, r4
 8004678:	d90b      	bls.n	8004692 <_free_r+0x4e>
 800467a:	6821      	ldr	r1, [r4, #0]
 800467c:	1862      	adds	r2, r4, r1
 800467e:	4293      	cmp	r3, r2
 8004680:	bf04      	itt	eq
 8004682:	681a      	ldreq	r2, [r3, #0]
 8004684:	685b      	ldreq	r3, [r3, #4]
 8004686:	6063      	str	r3, [r4, #4]
 8004688:	bf04      	itt	eq
 800468a:	1852      	addeq	r2, r2, r1
 800468c:	6022      	streq	r2, [r4, #0]
 800468e:	602c      	str	r4, [r5, #0]
 8004690:	e7ec      	b.n	800466c <_free_r+0x28>
 8004692:	461a      	mov	r2, r3
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	b10b      	cbz	r3, 800469c <_free_r+0x58>
 8004698:	42a3      	cmp	r3, r4
 800469a:	d9fa      	bls.n	8004692 <_free_r+0x4e>
 800469c:	6811      	ldr	r1, [r2, #0]
 800469e:	1855      	adds	r5, r2, r1
 80046a0:	42a5      	cmp	r5, r4
 80046a2:	d10b      	bne.n	80046bc <_free_r+0x78>
 80046a4:	6824      	ldr	r4, [r4, #0]
 80046a6:	4421      	add	r1, r4
 80046a8:	1854      	adds	r4, r2, r1
 80046aa:	42a3      	cmp	r3, r4
 80046ac:	6011      	str	r1, [r2, #0]
 80046ae:	d1dd      	bne.n	800466c <_free_r+0x28>
 80046b0:	681c      	ldr	r4, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	6053      	str	r3, [r2, #4]
 80046b6:	4421      	add	r1, r4
 80046b8:	6011      	str	r1, [r2, #0]
 80046ba:	e7d7      	b.n	800466c <_free_r+0x28>
 80046bc:	d902      	bls.n	80046c4 <_free_r+0x80>
 80046be:	230c      	movs	r3, #12
 80046c0:	6003      	str	r3, [r0, #0]
 80046c2:	e7d3      	b.n	800466c <_free_r+0x28>
 80046c4:	6825      	ldr	r5, [r4, #0]
 80046c6:	1961      	adds	r1, r4, r5
 80046c8:	428b      	cmp	r3, r1
 80046ca:	bf04      	itt	eq
 80046cc:	6819      	ldreq	r1, [r3, #0]
 80046ce:	685b      	ldreq	r3, [r3, #4]
 80046d0:	6063      	str	r3, [r4, #4]
 80046d2:	bf04      	itt	eq
 80046d4:	1949      	addeq	r1, r1, r5
 80046d6:	6021      	streq	r1, [r4, #0]
 80046d8:	6054      	str	r4, [r2, #4]
 80046da:	e7c7      	b.n	800466c <_free_r+0x28>
 80046dc:	b003      	add	sp, #12
 80046de:	bd30      	pop	{r4, r5, pc}
 80046e0:	2000010c 	.word	0x2000010c

080046e4 <_malloc_r>:
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	1ccd      	adds	r5, r1, #3
 80046e8:	f025 0503 	bic.w	r5, r5, #3
 80046ec:	3508      	adds	r5, #8
 80046ee:	2d0c      	cmp	r5, #12
 80046f0:	bf38      	it	cc
 80046f2:	250c      	movcc	r5, #12
 80046f4:	2d00      	cmp	r5, #0
 80046f6:	4606      	mov	r6, r0
 80046f8:	db01      	blt.n	80046fe <_malloc_r+0x1a>
 80046fa:	42a9      	cmp	r1, r5
 80046fc:	d903      	bls.n	8004706 <_malloc_r+0x22>
 80046fe:	230c      	movs	r3, #12
 8004700:	6033      	str	r3, [r6, #0]
 8004702:	2000      	movs	r0, #0
 8004704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004706:	f000 f87d 	bl	8004804 <__malloc_lock>
 800470a:	4921      	ldr	r1, [pc, #132]	; (8004790 <_malloc_r+0xac>)
 800470c:	680a      	ldr	r2, [r1, #0]
 800470e:	4614      	mov	r4, r2
 8004710:	b99c      	cbnz	r4, 800473a <_malloc_r+0x56>
 8004712:	4f20      	ldr	r7, [pc, #128]	; (8004794 <_malloc_r+0xb0>)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	b923      	cbnz	r3, 8004722 <_malloc_r+0x3e>
 8004718:	4621      	mov	r1, r4
 800471a:	4630      	mov	r0, r6
 800471c:	f000 f862 	bl	80047e4 <_sbrk_r>
 8004720:	6038      	str	r0, [r7, #0]
 8004722:	4629      	mov	r1, r5
 8004724:	4630      	mov	r0, r6
 8004726:	f000 f85d 	bl	80047e4 <_sbrk_r>
 800472a:	1c43      	adds	r3, r0, #1
 800472c:	d123      	bne.n	8004776 <_malloc_r+0x92>
 800472e:	230c      	movs	r3, #12
 8004730:	6033      	str	r3, [r6, #0]
 8004732:	4630      	mov	r0, r6
 8004734:	f000 f86c 	bl	8004810 <__malloc_unlock>
 8004738:	e7e3      	b.n	8004702 <_malloc_r+0x1e>
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	1b5b      	subs	r3, r3, r5
 800473e:	d417      	bmi.n	8004770 <_malloc_r+0x8c>
 8004740:	2b0b      	cmp	r3, #11
 8004742:	d903      	bls.n	800474c <_malloc_r+0x68>
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	441c      	add	r4, r3
 8004748:	6025      	str	r5, [r4, #0]
 800474a:	e004      	b.n	8004756 <_malloc_r+0x72>
 800474c:	6863      	ldr	r3, [r4, #4]
 800474e:	42a2      	cmp	r2, r4
 8004750:	bf0c      	ite	eq
 8004752:	600b      	streq	r3, [r1, #0]
 8004754:	6053      	strne	r3, [r2, #4]
 8004756:	4630      	mov	r0, r6
 8004758:	f000 f85a 	bl	8004810 <__malloc_unlock>
 800475c:	f104 000b 	add.w	r0, r4, #11
 8004760:	1d23      	adds	r3, r4, #4
 8004762:	f020 0007 	bic.w	r0, r0, #7
 8004766:	1ac2      	subs	r2, r0, r3
 8004768:	d0cc      	beq.n	8004704 <_malloc_r+0x20>
 800476a:	1a1b      	subs	r3, r3, r0
 800476c:	50a3      	str	r3, [r4, r2]
 800476e:	e7c9      	b.n	8004704 <_malloc_r+0x20>
 8004770:	4622      	mov	r2, r4
 8004772:	6864      	ldr	r4, [r4, #4]
 8004774:	e7cc      	b.n	8004710 <_malloc_r+0x2c>
 8004776:	1cc4      	adds	r4, r0, #3
 8004778:	f024 0403 	bic.w	r4, r4, #3
 800477c:	42a0      	cmp	r0, r4
 800477e:	d0e3      	beq.n	8004748 <_malloc_r+0x64>
 8004780:	1a21      	subs	r1, r4, r0
 8004782:	4630      	mov	r0, r6
 8004784:	f000 f82e 	bl	80047e4 <_sbrk_r>
 8004788:	3001      	adds	r0, #1
 800478a:	d1dd      	bne.n	8004748 <_malloc_r+0x64>
 800478c:	e7cf      	b.n	800472e <_malloc_r+0x4a>
 800478e:	bf00      	nop
 8004790:	2000010c 	.word	0x2000010c
 8004794:	20000110 	.word	0x20000110

08004798 <_realloc_r>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	4607      	mov	r7, r0
 800479c:	4614      	mov	r4, r2
 800479e:	460e      	mov	r6, r1
 80047a0:	b921      	cbnz	r1, 80047ac <_realloc_r+0x14>
 80047a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80047a6:	4611      	mov	r1, r2
 80047a8:	f7ff bf9c 	b.w	80046e4 <_malloc_r>
 80047ac:	b922      	cbnz	r2, 80047b8 <_realloc_r+0x20>
 80047ae:	f7ff ff49 	bl	8004644 <_free_r>
 80047b2:	4625      	mov	r5, r4
 80047b4:	4628      	mov	r0, r5
 80047b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b8:	f000 f830 	bl	800481c <_malloc_usable_size_r>
 80047bc:	42a0      	cmp	r0, r4
 80047be:	d20f      	bcs.n	80047e0 <_realloc_r+0x48>
 80047c0:	4621      	mov	r1, r4
 80047c2:	4638      	mov	r0, r7
 80047c4:	f7ff ff8e 	bl	80046e4 <_malloc_r>
 80047c8:	4605      	mov	r5, r0
 80047ca:	2800      	cmp	r0, #0
 80047cc:	d0f2      	beq.n	80047b4 <_realloc_r+0x1c>
 80047ce:	4631      	mov	r1, r6
 80047d0:	4622      	mov	r2, r4
 80047d2:	f7ff fb60 	bl	8003e96 <memcpy>
 80047d6:	4631      	mov	r1, r6
 80047d8:	4638      	mov	r0, r7
 80047da:	f7ff ff33 	bl	8004644 <_free_r>
 80047de:	e7e9      	b.n	80047b4 <_realloc_r+0x1c>
 80047e0:	4635      	mov	r5, r6
 80047e2:	e7e7      	b.n	80047b4 <_realloc_r+0x1c>

080047e4 <_sbrk_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	4d06      	ldr	r5, [pc, #24]	; (8004800 <_sbrk_r+0x1c>)
 80047e8:	2300      	movs	r3, #0
 80047ea:	4604      	mov	r4, r0
 80047ec:	4608      	mov	r0, r1
 80047ee:	602b      	str	r3, [r5, #0]
 80047f0:	f7fc f890 	bl	8000914 <_sbrk>
 80047f4:	1c43      	adds	r3, r0, #1
 80047f6:	d102      	bne.n	80047fe <_sbrk_r+0x1a>
 80047f8:	682b      	ldr	r3, [r5, #0]
 80047fa:	b103      	cbz	r3, 80047fe <_sbrk_r+0x1a>
 80047fc:	6023      	str	r3, [r4, #0]
 80047fe:	bd38      	pop	{r3, r4, r5, pc}
 8004800:	2000019c 	.word	0x2000019c

08004804 <__malloc_lock>:
 8004804:	4801      	ldr	r0, [pc, #4]	; (800480c <__malloc_lock+0x8>)
 8004806:	f000 b811 	b.w	800482c <__retarget_lock_acquire_recursive>
 800480a:	bf00      	nop
 800480c:	200001a4 	.word	0x200001a4

08004810 <__malloc_unlock>:
 8004810:	4801      	ldr	r0, [pc, #4]	; (8004818 <__malloc_unlock+0x8>)
 8004812:	f000 b80c 	b.w	800482e <__retarget_lock_release_recursive>
 8004816:	bf00      	nop
 8004818:	200001a4 	.word	0x200001a4

0800481c <_malloc_usable_size_r>:
 800481c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004820:	1f18      	subs	r0, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	bfbc      	itt	lt
 8004826:	580b      	ldrlt	r3, [r1, r0]
 8004828:	18c0      	addlt	r0, r0, r3
 800482a:	4770      	bx	lr

0800482c <__retarget_lock_acquire_recursive>:
 800482c:	4770      	bx	lr

0800482e <__retarget_lock_release_recursive>:
 800482e:	4770      	bx	lr

08004830 <_init>:
 8004830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004832:	bf00      	nop
 8004834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004836:	bc08      	pop	{r3}
 8004838:	469e      	mov	lr, r3
 800483a:	4770      	bx	lr

0800483c <_fini>:
 800483c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483e:	bf00      	nop
 8004840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004842:	bc08      	pop	{r3}
 8004844:	469e      	mov	lr, r3
 8004846:	4770      	bx	lr
